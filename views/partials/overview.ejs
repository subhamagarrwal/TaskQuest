<!-- Header -->
<div class="header">
  <h1>Overview</h1>
  <div class="user-info">
    <div class="user-avatar">
      <%= user && user.username ? user.username.charAt(0).toUpperCase() : 'U' %>
    </div>
    <div>
      <div style="font-weight: 600;"><%= user && user.username ? user.username : 'User' %></div>
      <div style="color: #64748b; font-size: 0.875rem;"><%= user && user.role === 'ADMIN' ? 'Admin' : 'User' %></div>
    </div>
  </div>
</div>

<!-- Task Progress Cards -->
<div class="dashboard-grid">
  <div class="dashboard-card">
    <div class="card-header">
      <div class="card-avatar" style="background: linear-gradient(45deg, #3b82f6, #1d4ed8); display: flex; align-items: center; justify-content: center; font-size: 2rem;">+</div>
      <div class="card-info">
        <h3>Create New Task</h3>
        <p>Start a new assignment</p>
      </div>
    </div>
    <button onclick="navigateToTasksAndOpenModal()" class="btn btn-primary" style="width: 100%; text-align: center;">Create Task</button>
  </div>

  <% if (typeof quests !== 'undefined' && quests && quests.length > 0) { %>
    <div class="dashboard-card">
      <div class="card-header">
        <div class="card-avatar" style="background: linear-gradient(45deg, #f59e0b, #ef4444); display: flex; align-items: center; justify-content: center; font-size: 1.5rem;">✏️</div>
        <div class="card-info">
          <h3>Edit Quest</h3>
          <p>Modify quest details</p>
        </div>
      </div>
      <button onclick="openQuestEditFromOverview()" class="btn btn-warning" style="width: 100%; text-align: center; background: linear-gradient(45deg, #f59e0b, #ef4444); color: #fff; border: none;">Edit Quest</button>
    </div>
  <% } %>

  <div class="dashboard-card">
    <div class="card-header">
      <div class="card-avatar" style="background: linear-gradient(45deg, #10b981, #059669); display: flex; align-items: center; justify-content: center; font-size: 1.5rem;">👥</div>
      <div class="card-info">
        <h3>Team Members</h3>
        <p>Assign users to tasks</p>
      </div>
    </div>
    <button onclick="navigateToQuestsAndOpenUserModal()" class="btn btn-secondary" style="width: 100%; text-align: center;">Team Members</button>
  </div>
</div>

<!-- Quest Management Section -->
<% if (typeof quests !== 'undefined' && quests && quests.length > 0) { %>
  <div class="dashboard-grid" style="margin-top: 2rem;">
    <div class="dashboard-card" style="grid-column: 1 / -1;">
      <div class="card-header">
        <div class="card-avatar" style="background: linear-gradient(45deg, #8b5cf6, #7c3aed); display: flex; align-items: center; justify-content: center; font-size: 1.5rem;">🎯</div>
        <div class="card-info">
          <h3><%= quests[0].title %></h3>
          <p><%= quests[0].description || 'Quest Description' %></p>
        </div>
      </div>
      
      <!-- Quest Invite Code Section -->
      <div style="background: rgba(139, 92, 246, 0.1); border: 1px solid rgba(139, 92, 246, 0.3); border-radius: 12px; padding: 1.5rem; margin: 1rem 0;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
          <h4 style="margin: 0; color: #e2e8f0; display: flex; align-items: center; gap: 0.5rem;">
            🔗 Quest Invite Code
          </h4>
          <div style="display: flex; gap: 0.5rem;">
            <button onclick="generateInviteCode('<%= quests[0]._id %>')" class="btn btn-primary" style="background: linear-gradient(45deg, #8b5cf6, #7c3aed); padding: 0.5rem 1rem; font-size: 0.875rem;">
              🔄 Generate New Code
            </button>
            <button onclick="openGenerateUserCodesModal()" class="btn btn-secondary" style="background: linear-gradient(45deg, #f59e0b, #ef4444); padding: 0.5rem 1rem; font-size: 0.875rem;">
              👥 Generate User Codes
            </button>
          </div>
        </div>
        
        <div id="invite-code-section-<%= quests[0]._id %>">
          <% if (quests[0].inviteCode) { %>
            <div style="background: #1e293b; border-radius: 8px; padding: 1rem; border: 1px solid #334155;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem;">
                <label style="color: #94a3b8; font-size: 0.875rem; font-weight: 500;">Quest Code:</label>
                <button onclick="copyToClipboard('<%= quests[0].inviteCode %>')" class="btn btn-secondary" style="padding: 0.25rem 0.5rem; font-size: 0.75rem;">📋 Copy</button>
              </div>
              <div style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 1.125rem; font-weight: 700; color: #a78bfa; background: #0f172a; padding: 0.75rem; border-radius: 6px; border: 1px solid #475569; letter-spacing: 0.1em;">
                <%= quests[0].inviteCode %>
              </div>
              
              <div style="margin-top: 1rem;">
                <label style="color: #94a3b8; font-size: 0.875rem; font-weight: 500; display: block; margin-bottom: 0.5rem;">Bot Invitation Link:</label>
                <div style="display: flex; gap: 0.5rem;">
                  <input type="text" 
                         id="bot-link-<%= quests[0]._id %>" 
                         value="https://t.me/<%= process.env.BOT_USERNAME || 'your_bot' %>?start=auth_<%= quests[0].inviteCode %>" 
                         readonly 
                         style="flex: 1; padding: 0.5rem; background: #0f172a; border: 1px solid #475569; border-radius: 6px; color: #94a3b8; font-size: 0.875rem; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;">
                  <button onclick="copyBotLink('<%= quests[0]._id %>')" class="btn btn-secondary" style="padding: 0.5rem; font-size: 0.75rem;">📋</button>
                  <button onclick="shareBotLink('<%= quests[0]._id %>')" class="btn btn-primary" style="background: linear-gradient(45deg, #0ea5e9, #0284c7); padding: 0.5rem; font-size: 0.75rem;">📤 Share</button>
                </div>
              </div>
              
              <% if (quests[0].inviteCodeExpires) { %>
                <div style="margin-top: 0.75rem; color: #f59e0b; font-size: 0.8rem; display: flex; align-items: center; gap: 0.5rem;">
                  ⏰ Expires: <%= new Date(quests[0].inviteCodeExpires).toLocaleDateString() %> at <%= new Date(quests[0].inviteCodeExpires).toLocaleTimeString() %>
                </div>
              <% } %>
              
              <div style="margin-top: 1rem; padding: 0.75rem; background: rgba(34, 197, 94, 0.1); border: 1px solid rgba(34, 197, 94, 0.3); border-radius: 6px;">
                <div style="color: #22c55e; font-size: 0.875rem; font-weight: 600; margin-bottom: 0.25rem;">📱 How to invite users:</div>
                <div style="color: #94a3b8; font-size: 0.8rem;">
                  1. Share the bot link above with team members<br>
                  2. Users click the link to auto-join via Telegram<br>
                  3. Or users can manually type: <code style="background: #0f172a; padding: 0.1rem 0.3rem; border-radius: 3px; color: #a78bfa;">/auth <%= quests[0].inviteCode %></code>
                </div>
              </div>
              
              <!-- User Codes Display Section -->
              <div id="userCodesDisplay" style="display: none; margin-top: 1rem;">
                <!-- User codes will be displayed here after generation -->
              </div>
            </div>
          <% } else { %>
            <div style="text-align: center; padding: 2rem; color: #64748b;" id="no-code-message-<%= quests[0]._id %>">
              <div style="font-size: 2rem; margin-bottom: 0.5rem;">🔐</div>
              <p>Generating invite code...</p>
              <p style="font-size: 0.875rem;">Your quest is being set up with an invitation link</p>
            </div>
            <script>
              // Auto-generate invite code for quests without one
              (function() {
                generateInviteCode('<%= quests[0]._id %>').catch(error => {
                  console.error('Failed to auto-generate invite code:', error);
                  document.getElementById('no-code-message-<%= quests[0]._id %>').innerHTML = `
                    <div style="font-size: 2rem; margin-bottom: 0.5rem;">⚠️</div>
                    <p>Failed to generate invite code</p>
                    <p style="font-size: 0.875rem;">Click "Generate New Code" to try again</p>
                  `;
                });
              })();
            </script>
          <% } %>
        </div>
      </div>
      
      <!-- Quest Stats -->
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-top: 1rem;">
        <div style="text-align: center; padding: 0.75rem; background: rgba(59, 130, 246, 0.1); border-radius: 8px;">
          <div style="font-size: 1.25rem; font-weight: 700; color: #3b82f6;"><%= quests[0].members ? quests[0].members.length : 0 %></div>
          <div style="font-size: 0.75rem; color: #94a3b8;">Members</div>
        </div>
        <div style="text-align: center; padding: 0.75rem; background: rgba(34, 197, 94, 0.1); border-radius: 8px;">
          <div style="font-size: 1.25rem; font-weight: 700; color: #22c55e;"><%= quests[0].progress || 0 %>%</div>
          <div style="font-size: 0.75rem; color: #94a3b8;">Progress</div>
        </div>
        <div style="text-align: center; padding: 0.75rem; background: rgba(249, 115, 22, 0.1); border-radius: 8px;">
          <div style="font-size: 1.25rem; font-weight: 700; color: #f97316;"><%= tasks ? tasks.filter(t => t.quest && t.quest._id.toString() === quests[0]._id.toString()).length : 0 %></div>
          <div style="font-size: 0.75rem; color: #94a3b8;">Tasks</div>
        </div>
      </div>
    </div>
  </div>
<% } %>


<script>
// Overview navigation functions to link buttons to existing components

// Navigate to tasks section and open task creation modal
function navigateToTasksAndOpenModal() {
  // First navigate to the tasks section
  window.location.href = '/dashboard?section=tasks';
  
  // Set a flag to open the modal once the page loads
  sessionStorage.setItem('openTaskModal', 'true');
}

// Navigate to quests section (team members)
function navigateToQuestsAndOpenUserModal() {
  // Navigate directly to the quests section (where team members management is)
  window.location.href = '/dashboard?section=quests';
}

// Function to open quest edit modal directly from overview
function openQuestEditFromOverview() {
  console.log('🎯 Edit Quest clicked from overview');
  
  <% if (typeof quests !== 'undefined' && quests && quests.length > 0) { %>
    try {
      // Get the first quest data (since only one quest is allowed)
      const questData = {
        id: '<%= quests[0]._id.toString() %>',
        title: '<%= quests[0].title.replace(/'/g, "\\'") %>',
        description: '<%= (quests[0].description || "").replace(/'/g, "\\'") %>',
        completionDate: '<%= quests[0].completionDate ? quests[0].completionDate.toISOString().split("T")[0] : "" %>'
      };
      
      console.log('📊 Quest data prepared:', questData);
      
      // Store quest data in session storage for use in quests section
      sessionStorage.setItem('questEditData', JSON.stringify(questData));
      console.log('💾 Quest data stored in session storage');
    } catch (error) {
      console.error('❌ Error preparing quest data:', error);
    }
  <% } else { %>
    console.log('⚠️ No quests available for editing');
  <% } %>
  
  // Navigate to quests section and open quest edit modal
  console.log('🔄 Navigating to quests section...');
  
  // Set a flag to open the quest edit modal once the page loads
  sessionStorage.setItem('openQuestEditModal', 'true');
  
  // Navigate to quests section
  window.location.href = '/dashboard?section=quests';
}

// Check for flags on page load and open appropriate modals
document.addEventListener('DOMContentLoaded', function() {
  // Check if we should open task modal (when coming from overview)
  if (sessionStorage.getItem('openTaskModal') === 'true') {
    sessionStorage.removeItem('openTaskModal');
    // Small delay to ensure DOM is ready
    setTimeout(() => {
      if (typeof openTaskModal === 'function') {
        openTaskModal();
      }
    }, 100);
  }
  
  // Check if we should open user modal (when coming from overview)
  if (sessionStorage.getItem('openUserModal') === 'true') {
    sessionStorage.removeItem('openUserModal');
    // Small delay to ensure DOM is ready
    setTimeout(() => {
      if (typeof openUserModal === 'function') {
        openUserModal();
      }
    }, 100);
  }
});

// Invite code management functions
async function generateInviteCode(questId, expiresInHours = 24) {
  try {
    console.log('🔄 Generating invite code for quest:', questId);
    
    const mutation = `
      mutation GenerateQuestInviteCode($questId: ID!, $expiresInHours: Int) {
        generateQuestInviteCode(questId: $questId, expiresInHours: $expiresInHours) {
          success
          inviteCode
          botLink
          expiresAt
        }
      }
    `;

    const response = await window.graphqlClient.request(mutation, {
      questId: questId,
      expiresInHours: expiresInHours
    });

    if (response.generateQuestInviteCode.success) {
      const { inviteCode, botLink, expiresAt } = response.generateQuestInviteCode;
      
      // Update the invite code section
      const section = document.getElementById(`invite-code-section-${questId}`);
      const expireDate = expiresAt ? new Date(expiresAt) : null;
      
      section.innerHTML = `
        <div style="background: #1e293b; border-radius: 8px; padding: 1rem; border: 1px solid #334155;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem;">
            <label style="color: #94a3b8; font-size: 0.875rem; font-weight: 500;">Quest Code:</label>
            <button onclick="copyToClipboard('${inviteCode}')" class="btn btn-secondary" style="padding: 0.25rem 0.5rem; font-size: 0.75rem;">📋 Copy</button>
          </div>
          <div style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 1.125rem; font-weight: 700; color: #a78bfa; background: #0f172a; padding: 0.75rem; border-radius: 6px; border: 1px solid #475569; letter-spacing: 0.1em;">
            ${inviteCode}
          </div>
          
          <div style="margin-top: 1rem;">
            <label style="color: #94a3b8; font-size: 0.875rem; font-weight: 500; display: block; margin-bottom: 0.5rem;">Bot Invitation Link:</label>
            <div style="display: flex; gap: 0.5rem;">
              <input type="text" 
                     id="bot-link-${questId}" 
                     value="${botLink}" 
                     readonly 
                     style="flex: 1; padding: 0.5rem; background: #0f172a; border: 1px solid #475569; border-radius: 6px; color: #94a3b8; font-size: 0.875rem; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;">
              <button onclick="copyBotLink('${questId}')" class="btn btn-secondary" style="padding: 0.5rem; font-size: 0.75rem;">📋</button>
              <button onclick="shareBotLink('${questId}')" class="btn btn-primary" style="background: linear-gradient(45deg, #0ea5e9, #0284c7); padding: 0.5rem; font-size: 0.75rem;">📤 Share</button>
            </div>
          </div>
          
          ${expireDate ? `
            <div style="margin-top: 0.75rem; color: #f59e0b; font-size: 0.8rem; display: flex; align-items: center; gap: 0.5rem;">
              ⏰ Expires: ${expireDate.toLocaleDateString()} at ${expireDate.toLocaleTimeString()}
            </div>
          ` : ''}
          
          <div style="margin-top: 1rem; padding: 0.75rem; background: rgba(34, 197, 94, 0.1); border: 1px solid rgba(34, 197, 94, 0.3); border-radius: 6px;">
            <div style="color: #22c55e; font-size: 0.875rem; font-weight: 600; margin-bottom: 0.25rem;">📱 How to invite users:</div>
            <div style="color: #94a3b8; font-size: 0.8rem;">
              1. Share the bot link above with team members<br>
              2. Users click the link to auto-join via Telegram<br>
              3. Or users can manually type: <code style="background: #0f172a; padding: 0.1rem 0.3rem; border-radius: 3px; color: #a78bfa;">/auth ${inviteCode}</code>
            </div>
          </div>
        </div>
      `;
      
      // Show success message
      showNotification('✅ Invite code generated successfully!', 'success');
      
    } else {
      throw new Error('Failed to generate invite code');
    }
    
  } catch (error) {
    console.error('❌ Error generating invite code:', error);
    showNotification('❌ Failed to generate invite code: ' + error.message, 'error');
  }
}

function copyToClipboard(text) {
  navigator.clipboard.writeText(text).then(() => {
    showNotification('📋 Copied to clipboard!', 'success');
  }).catch(() => {
    showNotification('❌ Failed to copy to clipboard', 'error');
  });
}

function copyBotLink(questId) {
  const input = document.getElementById(`bot-link-${questId}`);
  if (input) {
    input.select();
    navigator.clipboard.writeText(input.value).then(() => {
      showNotification('📋 Bot link copied to clipboard!', 'success');
    }).catch(() => {
      showNotification('❌ Failed to copy bot link', 'error');
    });
  }
}

function shareBotLink(questId) {
  const input = document.getElementById(`bot-link-${questId}`);
  if (input && navigator.share) {
    navigator.share({
      title: 'Join our TaskQuest team!',
      text: 'Click this link to join our quest team on Telegram:',
      url: input.value
    }).catch(console.error);
  } else if (input) {
    // Fallback to copying
    copyBotLink(questId);
  }
}

function showNotification(message, type = 'info') {
  // Create notification element
  const notification = document.createElement('div');
  notification.className = `flash-notification flash-${type}`;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 10000;
    background: ${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#3b82f6'};
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    animation: slideInRight 0.3s ease-out;
  `;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  // Auto remove after 3 seconds
  setTimeout(() => {
    notification.style.animation = 'slideOutRight 0.3s ease-in';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// Add CSS animations
const style = document.createElement('style');
style.textContent = `
  @keyframes slideInRight {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  @keyframes slideOutRight {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
  }
`;
document.head.appendChild(style);
</script>

<!-- Generate User Codes Modal -->
<div id="generateUserCodesModalOverlay" style="position: fixed; inset: 0; background: rgba(30,41,59,0.8); backdrop-filter: blur(8px); z-index: 10000; display: none; align-items: center; justify-content: center;">
  <div id="generateUserCodesModal" style="background: #1e293b; color: #ffffff; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); padding: 2rem; min-width: 500px; max-width: 90vw; text-align: center; position: relative; border: 1px solid rgba(255,255,255,0.1); max-height: 80vh; overflow-y: auto;">
    <button onclick="closeGenerateUserCodesModal()" style="position: absolute; top: 1rem; right: 1rem; background: none; border: none; font-size: 1.5rem; color: #64748b; cursor: pointer; padding: 0.25rem;">&times;</button>
    <div style="font-size: 3rem; margin-bottom: 1rem;">👥</div>
    <div style="font-weight: 700; font-size: 1.4rem; margin-bottom: 0.5rem; color: #ffffff;">Generate User Codes</div>
    <div style="margin-bottom: 1.5rem; color: #94a3b8;">Generate 24-hour authentication codes for team members to access the Telegram bot.</div>
    
    <form id="generateUserCodesForm" style="text-align: left;">
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Select Team Members</label>
        <div id="userCodesCheckboxes" style="max-height: 200px; overflow-y: auto; background: #334155; border-radius: 8px; padding: 1rem; border: 1px solid #475569;">
          <% if (typeof allUsers !== 'undefined' && allUsers && allUsers.length > 0) { %>
            <% allUsers.forEach(userItem => { %>
              <% if (userItem.role !== 'ADMIN') { %>
                <label style="display: flex; align-items: center; padding: 0.5rem; margin-bottom: 0.5rem; background: #1e293b; border-radius: 6px; cursor: pointer;" 
                       onmouseover="this.style.background='#475569'" 
                       onmouseout="this.style.background='#1e293b'">
                  <input type="checkbox" name="userEmails" value="<%= userItem.email %>" style="margin-right: 0.75rem; transform: scale(1.2);">
                  <div style="flex: 1;">
                    <div style="font-weight: 500; color: #e2e8f0;"><%= userItem.username %></div>
                    <div style="font-size: 0.8rem; color: #94a3b8;"><%= userItem.email %></div>
                  </div>
                </label>
              <% } %>
            <% }) %>
          <% } else { %>
            <div style="text-align: center; color: #94a3b8; padding: 1rem;">
              No team members found. Add team members first to generate codes.
            </div>
          <% } %>
        </div>
      </div>
      
      <div style="display: flex; gap: 1rem;">
        <button type="button" onclick="closeGenerateUserCodesModal()" style="flex: 1; padding: 0.75rem; background: #64748b; color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer;">Cancel</button>
        <button type="submit" style="flex: 1; padding: 0.75rem; background: linear-gradient(45deg, #f59e0b, #ef4444); color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer;">🔑 Generate Codes</button>
      </div>
    </form>
  </div>
</div>

<script>
// User Codes Generation Functions
function openGenerateUserCodesModal() {
  document.getElementById('generateUserCodesModalOverlay').style.display = 'flex';
}

function closeGenerateUserCodesModal() {
  document.getElementById('generateUserCodesModalOverlay').style.display = 'none';
}

// Display user codes inline after generation
function displayUserCodes(userCodes) {
  const userCodesDisplay = document.getElementById('userCodesDisplay');
  
  if (!userCodes || userCodes.length === 0) {
    userCodesDisplay.style.display = 'none';
    return;
  }
  
  let codesHTML = `
    <div style="background: #1e293b; border-radius: 8px; padding: 1rem; border: 1px solid #334155;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
        <label style="color: #94a3b8; font-size: 0.875rem; font-weight: 500;">👥 User Authentication Codes (24h validity):</label>
        <button onclick="clearUserCodes()" class="btn btn-secondary" style="padding: 0.25rem 0.5rem; font-size: 0.75rem;">✕ Clear</button>
      </div>
  `;
  
  userCodes.forEach((userCode, index) => {
    const expiryDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours from now
    codesHTML += `
      <div style="background: #0f172a; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; border: 1px solid #475569;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem;">
          <div>
            <div style="color: #e2e8f0; font-weight: 600; margin-bottom: 0.25rem;">👤 ${userCode.username}</div>
            <div style="color: #94a3b8; font-size: 0.8rem;">${userCode.email}</div>
          </div>
          <button onclick="copyToClipboard('${userCode.userCode}')" class="btn btn-secondary" style="padding: 0.25rem 0.5rem; font-size: 0.75rem;">📋 Copy Code</button>
        </div>
        
        <div style="margin-bottom: 0.75rem;">
          <label style="color: #94a3b8; font-size: 0.75rem; margin-bottom: 0.25rem; display: block;">🔑 User Code:</label>
          <div style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 1rem; font-weight: 700; color: #22c55e; background: #064e3b; padding: 0.5rem; border-radius: 4px; border: 1px solid #059669;">
            ${userCode.userCode}
          </div>
        </div>
        
        <div style="margin-bottom: 0.75rem;">
          <label style="color: #94a3b8; font-size: 0.75rem; margin-bottom: 0.25rem; display: block;">🤖 Telegram Bot Link:</label>
          <div style="display: flex; gap: 0.5rem;">
            <input type="text" 
                   id="user-bot-link-${index}" 
                   value="${userCode.botLink}" 
                   readonly 
                   style="flex: 1; padding: 0.5rem; background: #0f172a; border: 1px solid #475569; border-radius: 4px; color: #94a3b8; font-size: 0.75rem; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;">
            <button onclick="copyUserBotLink(${index})" class="btn btn-secondary" style="padding: 0.5rem; font-size: 0.75rem;">📋</button>
            <button onclick="shareUserBotLink(${index})" class="btn btn-primary" style="background: linear-gradient(45deg, #0ea5e9, #0284c7); padding: 0.5rem; font-size: 0.75rem;">📤</button>
          </div>
        </div>
        
        <div style="color: #f59e0b; font-size: 0.75rem; display: flex; align-items: center; gap: 0.5rem;">
          ⏰ Expires: ${expiryDate.toLocaleDateString()} at ${expiryDate.toLocaleTimeString()}
        </div>
      </div>
    `;
  });
  
  codesHTML += `
      <div style="background: rgba(34, 197, 94, 0.1); border: 1px solid rgba(34, 197, 94, 0.3); border-radius: 6px; padding: 0.75rem; margin-top: 1rem;">
        <div style="color: #22c55e; font-size: 0.8rem; font-weight: 600; margin-bottom: 0.25rem;">📱 How users can authenticate:</div>
        <div style="color: #94a3b8; font-size: 0.75rem;">
          1. Share the individual bot links above with each team member<br>
          2. Users click their link to auto-join via Telegram<br>
          3. Or users can manually type their code: <code style="background: #0f172a; padding: 0.1rem 0.3rem; border-radius: 3px; color: #22c55e;">/auth [their_code]</code><br>
          4. User codes expire in 24 hours for security
        </div>
      </div>
    </div>
  `;
  
  userCodesDisplay.innerHTML = codesHTML;
  userCodesDisplay.style.display = 'block';
}

// Function to clear user codes display
function clearUserCodes() {
  const userCodesDisplay = document.getElementById('userCodesDisplay');
  userCodesDisplay.style.display = 'none';
  userCodesDisplay.innerHTML = '';
}

// Function to copy user bot link
function copyUserBotLink(index) {
  const input = document.getElementById(`user-bot-link-${index}`);
  if (input) {
    input.select();
    navigator.clipboard.writeText(input.value).then(() => {
      showNotification('📋 User bot link copied to clipboard!', 'success');
    }).catch(() => {
      showNotification('❌ Failed to copy user bot link', 'error');
    });
  }
}

// Function to share user bot link
function shareUserBotLink(index) {
  const input = document.getElementById(`user-bot-link-${index}`);
  if (input && navigator.share) {
    navigator.share({
      title: 'Join our TaskQuest team!',
      text: 'Click this link to join our quest team on Telegram:',
      url: input.value
    }).catch(console.error);
  } else if (input) {
    // Fallback to copying
    copyUserBotLink(index);
  }
}

document.head.appendChild(style);
</script>

<script>
// Handle user code generation form submission
document.addEventListener('DOMContentLoaded', function() {
  const generateUserCodesForm = document.getElementById('generateUserCodesForm');
  if (generateUserCodesForm) {
    generateUserCodesForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const selectedEmails = formData.getAll('userEmails');
      
      if (selectedEmails.length === 0) {
        showNotification('❌ Please select at least one team member to generate codes for.', 'error');
        return;
      }
      
      const submitButton = this.querySelector('button[type="submit"]');
      const originalText = submitButton.innerHTML;
      submitButton.innerHTML = '🔄 Generating...';
      submitButton.disabled = true;
      
      try {
        const response = await fetch('/api/codes/generate-user-codes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            <% if (typeof quests !== 'undefined' && quests && quests.length > 0) { %>
            questId: '<%= quests[0]._id %>',
            <% } %>
            userEmails: selectedEmails
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          showNotification(`✅ Generated codes for ${selectedEmails.length} team member(s)!`, 'success');
          closeGenerateUserCodesModal();
          
          // Display user codes inline instead of refreshing page
          displayUserCodes(result.userCodes);
          
          // Reset form 
          this.reset();
        } else {
          throw new Error(result.error || 'Failed to generate user codes');
        }
      } catch (error) {
        console.error('Error generating user codes:', error);
        showNotification('❌ ' + error.message, 'error');
      } finally {
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;
      }
    });
  }
});
</script>
