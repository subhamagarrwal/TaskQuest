<!-- Header -->
<div class="header">
  <h1>Manage Tasks</h1>
  <div class="user-info">
    <div class="user-avatar">
      <%= user && user.username ? user.username.charAt(0).toUpperCase() : 'U' %>
    </div>
    <div>
      <div style="font-weight: 600;"><%= user && user.username ? user.username : 'User' %></div>
      <div style="color: #64748b; font-size: 0.875rem;"><%= user && user.role === 'ADMIN' ? 'Project Manager' : 'Team Member' %></div>
    </div>
  </div>
</div>

<!-- Task Creation Modal Popup -->
<div id="taskModalOverlay" style="position: fixed; inset: 0; background: rgba(30,41,59,0.8); backdrop-filter: blur(8px); z-index: 10000; display: none; align-items: center; justify-content: center;">
  <div id="taskModal" style="background: #1e293b; color: #ffffff; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); padding: 2rem; min-width: 400px; max-width: 90vw; max-height: 80vh; overflow-y: auto; text-align: center; position: relative; border: 1px solid rgba(255,255,255,0.1);">
    <button onclick="closeTaskModal()" style="position: absolute; top: 1rem; right: 1rem; background: none; border: none; font-size: 1.5rem; color: #64748b; cursor: pointer; padding: 0.25rem;">&times;</button>
    <div style="font-size: 3rem; margin-bottom: 1rem;">📝</div>
    <div style="font-weight: 700; font-size: 1.4rem; margin-bottom: 0.5rem; color: #ffffff;">Create New Task</div>
    <div style="margin-bottom: 1.5rem; color: #94a3b8;">Add a new task to keep track of your work and progress.</div>
    <form id="createTaskForm" style="text-align: left;">
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Task Title *</label>
        <input type="text" name="title" placeholder="e.g., Complete project setup" required style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
      </div>
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Description</label>
        <textarea name="description" placeholder="Describe what this task involves..." style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem; min-height: 80px; resize: vertical;"></textarea>
      </div>
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Quest *</label>
        <select name="questId" id="questSelect" required style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;" onchange="updateDeadlineLimit()">
          <option value="">Select a quest...</option>
          <% if (typeof quests !== 'undefined' && quests && quests.length > 0) { %>
            <% quests.forEach(quest => { %>
              <option value="<%= quest._id.toString() %>" data-completion-date="<%= quest.completionDate ? quest.completionDate.toISOString().split('T')[0] : '' %>"><%= quest.title %></option>
            <% }); %>
          <% } %>
        </select>
      </div>
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Deadline</label>
        <input type="date" name="deadline" id="taskDeadline" min="" style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
        <div id="deadlineWarning" style="display: none; color: #ef4444; font-size: 0.8rem; margin-top: 0.25rem;">Task deadline cannot exceed quest completion date</div>
        <div id="pastDateWarning" style="display: none; color: #ef4444; font-size: 0.8rem; margin-top: 0.25rem;">Task deadline cannot be in the past</div>
      </div>
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Assign To *</label>
        <select name="assignedTo" required style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
          <option value="">Select user...</option>
          <% if (typeof allUsers !== 'undefined' && allUsers && allUsers.length > 0) { %>
            <% allUsers.forEach(userItem => { %>
              <option value="<%= userItem._id.toString() %>"><%= userItem.username %> (<%= userItem.email %>)</option>
            <% }); %>
          <% } %>
        </select>
      </div>
      <div style="margin-bottom: 1.5rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Priority</label>
        <select name="priority" style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
          <option value="LOW">Low</option>
          <option value="MEDIUM" selected>Medium</option>
          <option value="HIGH">High</option>
        </select>
      </div>
      <button type="submit" style="width: 100%; padding: 0.75rem; background: linear-gradient(45deg, #22c55e, #16a34a); color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer; transition: all 0.2s;">📝 Create Task</button>
    </form>
  </div>
</div>

<!-- Task Edit Modal Popup -->
<div id="editTaskModalOverlay" style="position: fixed; inset: 0; background: rgba(30,41,59,0.8); backdrop-filter: blur(8px); z-index: 10000; display: none; align-items: center; justify-content: center;">
  <div id="editTaskModal" style="background: #1e293b; color: #ffffff; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); padding: 2rem; min-width: 400px; max-width: 90vw; max-height: 80vh; overflow-y: auto; text-align: center; position: relative; border: 1px solid rgba(255,255,255,0.1);">
    <button onclick="closeEditTaskModal()" style="position: absolute; top: 1rem; right: 1rem; background: none; border: none; font-size: 1.5rem; color: #64748b; cursor: pointer; padding: 0.25rem;">&times;</button>
    <div style="font-size: 3rem; margin-bottom: 1rem;">✏️</div>
    <div style="font-weight: 700; font-size: 1.4rem; margin-bottom: 0.5rem; color: #ffffff;">Edit Task</div>
    <div style="margin-bottom: 1.5rem; color: #94a3b8;">Update your task details and status.</div>
    <form id="editTaskForm" style="text-align: left;">
      <input type="hidden" id="editTaskId" name="taskId">
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Task Title *</label>
        <input type="text" id="editTaskTitle" name="title" placeholder="e.g., Complete project setup" required style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
      </div>
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Description</label>
        <textarea id="editTaskDescription" name="description" placeholder="Describe what this task involves..." style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem; min-height: 80px; resize: vertical;"></textarea>
      </div>
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Deadline</label>
        <input type="date" id="editTaskDeadline" name="deadline" min="" style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
        <div id="editPastDateWarning" style="display: none; color: #ef4444; font-size: 0.8rem; margin-top: 0.25rem;">Task deadline cannot be in the past</div>
      </div>
      <div style="margin-bottom: 1rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Priority</label>
        <select id="editTaskPriority" name="priority" style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
          <option value="LOW">Low</option>
          <option value="MEDIUM">Medium</option>
          <option value="HIGH">High</option>
        </select>
      </div>
      <div style="margin-bottom: 1.5rem;">
        <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Status</label>
        <select id="editTaskCompleted" name="completed" style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
          <option value="false">Pending</option>
          <option value="true">Completed</option>
        </select>
      </div>
      <div style="display: flex; gap: 1rem;">
        <button type="button" onclick="closeEditTaskModal()" style="flex: 1; padding: 0.75rem; background: #64748b; color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer;">Cancel</button>
        <button type="submit" style="flex: 1; padding: 0.75rem; background: linear-gradient(45deg, #3b82f6, #2563eb); color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer; transition: all 0.2s;">✏️ Update Task</button>
      </div>
    </form>
  </div>
</div>

<!-- Task Management Section -->
<div class="dashboard-main" style="display: grid; grid-template-columns: 1fr 320px; gap: 2rem;">
  <!-- Main Task Management Container -->
  <div class="task-management-container">
    <!-- Task Management Header with Create Button -->
    <div class="task-management-header">
      <h2 class="task-management-title">Task Management</h2>
      <button onclick="openTaskModal()" class="btn btn-primary create-task-btn">
        📝 Create Task
      </button>
    </div>
    
    <!-- Tasks List - Inside the container -->
    <div class="tasks-list" style="flex: 1; overflow-y: auto; min-height: 0;">
      <% if (tasks && tasks.length > 0) { %>
        <% tasks.forEach(task => { %>
          <div class="task-item" data-task-id="<%= task._id ? task._id.toString() : task.id %>" data-status="<%= (task.completed || task.status === 'completed') ? 'completed' : 'pending' %>" data-priority="<%= task.priority || 'MEDIUM' %>" style="background: rgba(15, 23, 42, 0.6); border: 1px solid rgba(71, 85, 105, 0.3); border-radius: 8px; padding: 1.25rem; margin-bottom: 1rem; display: flex; justify-content: space-between; align-items: center; transition: all 0.2s ease;">
            <div class="task-info" style="flex: 1; margin-right: 1rem;">
              <h4 style="margin: 0 0 0.5rem 0; color: #e2e8f0; font-size: 1.1rem; font-weight: 600;"><%= task.title %></h4>
              <p style="margin: 0 0 0.75rem 0; color: #94a3b8; font-size: 0.875rem; line-height: 1.4;"><%= task.description || 'No description' %></p>
              
              <!-- Task Meta Information -->
              <div style="display: flex; flex-wrap: wrap; gap: 0.75rem; margin-top: 0.5rem;">
                <% if (task.deadline) { %>
                  <div style="color: #fbbf24; font-size: 0.75rem; display: flex; align-items: center; gap: 0.25rem;">
                    <span>⏰</span>
                    <span>Deadline: <%= new Date(task.deadline).toLocaleDateString() %></span>
                  </div>
                <% } %>
                <div style="font-size: 0.75rem; color: #64748b; display: flex; align-items: center; gap: 0.25rem;">
                  <span>🎯</span>
                  <span>Quest: <%= task.quest && task.quest.title ? task.quest.title : 'Unknown Quest' %></span>
                </div>
                <% if (task.assignedTo) { %>
                  <div style="font-size: 0.75rem; color: #60a5fa; display: flex; align-items: center; gap: 0.25rem;">
                    <span>👤</span>
                    <span><%= task.assignedTo.username %></span>
                  </div>
                <% } %>
              </div>
            </div>
            
            <!-- Task Actions - All on one line -->
            <div class="task-actions" style="display: flex; align-items: center; gap: 0.75rem; flex-shrink: 0;">
              <!-- Priority Badge -->
              <span class="task-priority" style="font-size: 0.75rem; padding: 0.25rem 0.5rem; border-radius: 12px; font-weight: 600; <%= (task.priority || 'MEDIUM') === 'HIGH' ? 'background: rgba(239, 68, 68, 0.2); color: #ef4444;' : (task.priority || 'MEDIUM') === 'LOW' ? 'background: rgba(34, 197, 94, 0.2); color: #22c55e;' : 'background: rgba(249, 115, 22, 0.2); color: #f97316;' %>">
                <%= task.priority || 'MEDIUM' %>
              </span>
              
              <!-- Status Badge -->
              <span class="task-status" style="font-size: 0.75rem; padding: 0.25rem 0.5rem; border-radius: 12px; font-weight: 600; <%= (task.completed || task.status === 'completed') ? 'background: rgba(34, 197, 94, 0.2); color: #22c55e;' : 'background: rgba(249, 115, 22, 0.2); color: #f97316;' %>">
                <%= (task.completed || task.status === 'completed') ? 'Completed' : 'Pending' %>
              </span>
              
              <!-- Action Buttons -->
              <button class="btn edit-task-btn" data-task-id="<%= task._id ? task._id.toString() : task.id %>" style="padding: 0.5rem 0.75rem; font-size: 0.75rem; background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 6px; cursor: pointer; transition: all 0.2s;">
                ✏️ Edit
              </button>
              
              <button class="btn delete-task-btn" data-task-id="<%= task._id ? task._id.toString() : task.id %>" style="padding: 0.5rem 0.75rem; font-size: 0.75rem; background: rgba(239, 68, 68, 0.1); color: #ef4444; border: 1px solid rgba(239, 68, 68, 0.3); border-radius: 6px; cursor: pointer; transition: all 0.2s;">
                🗑️ Delete
              </button>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <div class="task-item" style="text-align: center; padding: 3rem;">
          <div style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.6;">📝</div>
          <div class="task-info" style="margin-right: 0;">
            <h4 style="margin-bottom: 1rem;">No tasks found</h4>
            <p style="margin-bottom: 2rem;">Create your first task to get started with project management</p>
            <button onclick="openTaskModal()" class="btn btn-primary" style="background: linear-gradient(45deg, #22c55e, #16a34a); padding: 0.75rem 2rem; font-size: 1rem;">📝 Create First Task</button>
          </div>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Task Statistics - Properly Contained -->
  <div class="analytics-section" style="height: fit-content;">
    <div class="statistics-container" style="background: rgba(30, 41, 59, 0.8); border-radius: 12px; padding: 1.5rem; border: 1px solid #334155;">
      <h2 style="margin: 0 0 1.5rem 0; color: #e2e8f0; font-size: 1.25rem; font-weight: 700; text-align: center;">Task Statistics</h2>
      
      <!-- Statistics Grid -->
      <div style="display: grid; gap: 1rem;">
        <div class="metric" style="display: flex; align-items: center; gap: 1rem; padding: 1rem; background: rgba(15, 23, 42, 0.5); border-radius: 8px; border: 1px solid rgba(71, 85, 105, 0.3);">
          <div class="metric-icon" style="width: 40px; height: 40px; background: rgba(59, 130, 246, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; font-size: 1.25rem;">📝</div>
          <div class="metric-info" style="flex: 1;">
            <h3 style="margin: 0; font-size: 1.5rem; font-weight: 700; color: #e2e8f0;"><%= tasks ? tasks.length : 0 %></h3>
            <p style="margin: 0; color: #94a3b8; font-size: 0.875rem;">total tasks</p>
          </div>
        </div>
        
        <div class="metric" style="display: flex; align-items: center; gap: 1rem; padding: 1rem; background: rgba(15, 23, 42, 0.5); border-radius: 8px; border: 1px solid rgba(71, 85, 105, 0.3);">
          <div class="metric-icon" style="width: 40px; height: 40px; background: rgba(34, 197, 94, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; font-size: 1.25rem;">✅</div>
          <div class="metric-info" style="flex: 1;">
            <h3 style="margin: 0; font-size: 1.5rem; font-weight: 700; color: #e2e8f0;"><%= tasks ? tasks.filter(t => t.completed || t.status === 'completed').length : 0 %></h3>
            <p style="margin: 0; color: #94a3b8; font-size: 0.875rem;">completed</p>
          </div>
        </div>
        
        <div class="metric" style="display: flex; align-items: center; gap: 1rem; padding: 1rem; background: rgba(15, 23, 42, 0.5); border-radius: 8px; border: 1px solid rgba(71, 85, 105, 0.3);">
          <div class="metric-icon" style="width: 40px; height: 40px; background: rgba(249, 115, 22, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; font-size: 1.25rem;">⏳</div>
          <div class="metric-info" style="flex: 1;">
            <h3 style="margin: 0; font-size: 1.5rem; font-weight: 700; color: #e2e8f0;"><%= tasks ? tasks.filter(t => !t.completed && t.status !== 'completed').length : 0 %></h3>
            <p style="margin: 0; color: #94a3b8; font-size: 0.875rem;">pending</p>
          </div>
        </div>
        
        <div class="metric" style="display: flex; align-items: center; gap: 1rem; padding: 1rem; background: rgba(15, 23, 42, 0.5); border-radius: 8px; border: 1px solid rgba(71, 85, 105, 0.3);">
          <div class="metric-icon" style="width: 40px; height: 40px; background: rgba(139, 92, 246, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; font-size: 1.25rem;">📊</div>
          <div class="metric-info" style="flex: 1;">
            <h3 style="margin: 0; font-size: 1.5rem; font-weight: 700; color: #e2e8f0;"><%= tasks && tasks.length > 0 ? Math.round((tasks.filter(t => t.completed || t.status === 'completed').length / tasks.length) * 100) : 0 %>%</h3>
            <p style="margin: 0; color: #94a3b8; font-size: 0.875rem;">completion rate</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Modal open/close helpers
function closeTaskModal() {
  document.getElementById('taskModalOverlay').style.display = 'none';
}
function openTaskModal() {
  document.getElementById('taskModalOverlay').style.display = 'flex';
}

function closeEditTaskModal() {
  document.getElementById('editTaskModalOverlay').style.display = 'none';
}

function openEditTaskModal(taskId, title, description, priority, deadline, completed) {
  document.getElementById('editTaskId').value = taskId;
  document.getElementById('editTaskTitle').value = title;
  document.getElementById('editTaskDescription').value = description || '';
  document.getElementById('editTaskPriority').value = priority || 'MEDIUM';
  document.getElementById('editTaskDeadline').value = deadline ? new Date(deadline).toISOString().split('T')[0] : '';
  document.getElementById('editTaskCompleted').value = completed ? 'true' : 'false';
  document.getElementById('editTaskModalOverlay').style.display = 'flex';
}

// Set minimum date to today and validate deadlines
function initializeDateValidation() {
  const deadlineInput = document.getElementById('taskDeadline');
  const editDeadlineInput = document.getElementById('editTaskDeadline');
  const today = new Date().toISOString().split('T')[0];
  
  if (deadlineInput) {
    deadlineInput.min = today;
  }
  
  if (editDeadlineInput) {
    editDeadlineInput.min = today;
  }
}

// Enhanced deadline validation function
function updateDeadlineLimit() {
  const questSelect = document.getElementById('questSelect');
  const deadlineInput = document.getElementById('taskDeadline');
  const warningDiv = document.getElementById('deadlineWarning');
  const pastDateWarning = document.getElementById('pastDateWarning');
  const today = new Date().toISOString().split('T')[0];
  
  if (deadlineInput) {
    let hasError = false;
    
    // Check if date is in the past
    if (deadlineInput.value && deadlineInput.value < today) {
      pastDateWarning.style.display = 'block';
      deadlineInput.style.borderColor = '#ef4444';
      hasError = true;
    } else {
      pastDateWarning.style.display = 'none';
    }
    
    // Check against quest completion date
    if (questSelect && deadlineInput.value) {
      const selectedOption = questSelect.selectedOptions[0];
      if (selectedOption && selectedOption.dataset.completionDate) {
        const questCompletionDate = selectedOption.dataset.completionDate;
        deadlineInput.max = questCompletionDate;
        
        if (deadlineInput.value > questCompletionDate) {
          warningDiv.style.display = 'block';
          deadlineInput.style.borderColor = '#ef4444';
          hasError = true;
        } else {
          warningDiv.style.display = 'none';
        }
      }
    }
    
    // Reset border color if no errors
    if (!hasError) {
      deadlineInput.style.borderColor = '#475569';
    }
  }
}

// Add deadline validation to deadline input
document.addEventListener('DOMContentLoaded', function() {
  // Initialize date validation
  initializeDateValidation();
  
  const deadlineInput = document.getElementById('taskDeadline');
  const editDeadlineInput = document.getElementById('editTaskDeadline');
  
  if (deadlineInput) {
    deadlineInput.addEventListener('change', updateDeadlineLimit);
    deadlineInput.addEventListener('input', updateDeadlineLimit);
  }
  
  if (editDeadlineInput) {
    editDeadlineInput.addEventListener('change', function() {
      validateEditTaskDeadline();
    });
    editDeadlineInput.addEventListener('input', function() {
      validateEditTaskDeadline();
    });
  }
});

// Validate edit task deadline
function validateEditTaskDeadline() {
  const editDeadlineInput = document.getElementById('editTaskDeadline');
  const editPastDateWarning = document.getElementById('editPastDateWarning');
  const today = new Date().toISOString().split('T')[0];
  
  if (editDeadlineInput) {
    if (editDeadlineInput.value && editDeadlineInput.value < today) {
      editPastDateWarning.style.display = 'block';
      editDeadlineInput.style.borderColor = '#ef4444';
    } else {
      editPastDateWarning.style.display = 'none';
      editDeadlineInput.style.borderColor = '#475569';
    }
  }
}

// Allow closing modals with Escape key
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    closeTaskModal();
    closeEditTaskModal();
  }
});

// Close modals when clicking on overlay background
document.addEventListener('DOMContentLoaded', function() {
  const taskOverlay = document.getElementById('taskModalOverlay');
  const editTaskOverlay = document.getElementById('editTaskModalOverlay');
  
  if (taskOverlay) {
    taskOverlay.addEventListener('click', function(e) {
      if (e.target === taskOverlay) {
        closeTaskModal();
      }
    });
  }
  
  if (editTaskOverlay) {
    editTaskOverlay.addEventListener('click', function(e) {
      if (e.target === editTaskOverlay) {
        closeEditTaskModal();
      }
    });
  }
});

// Handle create task form submission
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('createTaskForm');
  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const title = this.title.value.trim();
      const description = this.description.value.trim();
      const priority = this.priority.value;
      const questId = this.questId.value;
      const assignedTo = this.assignedTo.value;
      const deadline = this.deadline.value || null;
      
      // Validate required fields
      if (!title) {
        alert('Task title is required!');
        return;
      }
      
      if (!questId) {
        alert('Please select a quest for this task!');
        return;
      }
      
      if (!assignedTo) {
        alert('Please select a user to assign this task to!');
        return;
      }
      
      // Validate deadline against quest completion date and past dates
      if (deadline) {
        const today = new Date().toISOString().split('T')[0];
        
        // Check if deadline is in the past
        if (deadline < today) {
          alert('Task deadline cannot be in the past!');
          return;
        }
        
        const questSelect = document.getElementById('questSelect');
        const selectedOption = questSelect.selectedOptions[0];
        if (selectedOption && selectedOption.dataset.completionDate) {
          const questCompletionDate = selectedOption.dataset.completionDate;
          if (deadline > questCompletionDate) {
            alert('Task deadline cannot exceed quest completion date!');
            return;
          }
        }
      }
      
      // Disable submit button
      const submitBtn = this.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = '🔄 Creating...';
      
      try {
        console.log('📝 Creating task via GraphQL:', { title, description, questId, priority, assignedTo, deadline });
        
        // Use GraphQL client to create task
        const result = await window.graphqlClient.createTask(title, description, questId, priority, assignedTo, deadline);
        console.log('✅ Task created successfully:', result);
        
        // Check if we actually got a task back
        if (result && result.createTask) {
          console.log('✅ Task creation confirmed:', result.createTask);
          
          // Success - close modal and reload
          closeTaskModal();
          window.location.reload();
        } else {
          console.warn('⚠️ Unexpected response format:', result);
          // Still close modal and reload since task might have been created
          closeTaskModal();
          window.location.reload();
        }
        
      } catch (error) {
        console.error('❌ GraphQL error creating task:', error);
        
        // Check if it's just a response format issue but task was created
        if (error.message.includes('ID cannot represent')) {
          console.log('🔄 Possible ID conversion issue, but task might be created. Reloading...');
          closeTaskModal();
          window.location.reload();
        } else {
          alert('Error creating task: ' + error.message);
          
          // Re-enable button
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      }
    });
  }
});

// Handle edit task form submission
document.addEventListener('DOMContentLoaded', function() {
  const editForm = document.getElementById('editTaskForm');
  if (editForm) {
    editForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const taskId = document.getElementById('editTaskId').value;
      const title = document.getElementById('editTaskTitle').value.trim();
      const description = document.getElementById('editTaskDescription').value.trim();
      const priority = document.getElementById('editTaskPriority').value;
      const deadline = document.getElementById('editTaskDeadline').value || null;
      const completed = document.getElementById('editTaskCompleted').value === 'true';
      
      if (!title) {
        alert('Task title is required!');
        return;
      }
      
      const submitBtn = this.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = '🔄 Updating...';
      
      try {
        console.log('✏️ Updating task via GraphQL:', { taskId, title, description, priority, deadline, completed });
        
        const data = await window.graphqlClient.updateTask(taskId, title, description, completed, priority, deadline, null);
        console.log('✅ Task updated successfully:', data);
        
        closeEditTaskModal();
        window.location.reload();
        
      } catch (error) {
        console.error('❌ Error updating task:', error);
        alert('Error updating task: ' + error.message);
        
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });
  }
});

// Handle delete task - improved version
document.addEventListener('DOMContentLoaded', function() {
  // Add event listeners to all delete buttons
  Array.from(document.getElementsByClassName('delete-task-btn')).forEach(btn => {
    btn.addEventListener('click', async function() {
      const taskId = this.getAttribute('data-task-id');
      
      if (!confirm('Are you sure you want to delete this task? This action cannot be undone.')) return;
      
      // Disable button during deletion
      this.disabled = true;
      this.textContent = 'Deleting...';
      
      try {
        console.log('🗑️ Deleting task via GraphQL:', taskId);
        
        const data = await window.graphqlClient.deleteTask(taskId);
        console.log('✅ Task deleted successfully:', data);
        
        // Reload to update the UI
        window.location.reload();
        
      } catch (error) {
        console.error('❌ GraphQL error deleting task:', error);
        alert('Error deleting task: ' + error.message);
        
        // Re-enable button on error
        this.disabled = false;
        this.textContent = 'Delete';
      }
    });
  });
});

// Handle edit task button clicks
document.addEventListener('DOMContentLoaded', function() {
  // Add event listeners to all edit buttons
  Array.from(document.getElementsByClassName('edit-task-btn')).forEach(btn => {
    btn.addEventListener('click', function() {
      const taskId = this.getAttribute('data-task-id');
      const taskItem = this.closest('.task-item');
      
      // Extract task data from the DOM
      const title = taskItem.querySelector('h4').textContent;
      const description = taskItem.querySelector('p').textContent;
      const priorityElement = taskItem.querySelector('.task-status-priority');
      const priority = priorityElement ? priorityElement.textContent.trim() : 'MEDIUM';
      const statusElement = taskItem.querySelector('.task-status');
      const completed = statusElement ? (statusElement.textContent.trim() === 'Completed') : false;
      
      // Extract deadline if it exists
      const deadlineElement = taskItem.querySelector('[style*="color: #fbbf24"]');
      let deadline = null;
      if (deadlineElement) {
        const deadlineText = deadlineElement.textContent;
        const dateMatch = deadlineText.match(/(\d{1,2}\/\d{1,2}\/\d{4})/);
        if (dateMatch) {
          // Convert from MM/DD/YYYY format to YYYY-MM-DD format for input
          const [month, day, year] = dateMatch[1].split('/');
          deadline = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        }
      }
      
      console.log('📝 Opening edit modal for task:', { taskId, title, description, priority, deadline, completed });
      
      openEditTaskModal(taskId, title, description, priority, deadline, completed);
    });
  });
});
</script>
