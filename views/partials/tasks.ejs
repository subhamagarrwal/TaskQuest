<!-- Header -->
<div class="header">
  <h1>Manage Tasks</h1>
  <div class="user-info">
    <div class="user-avatar">
      <%= user && user.username ? user.username.charAt(0).toUpperCase() : 'U' %>
    </div>
    <div>
      <div style="font-weight: 600;"><%= user && user.username ? user.username : 'User' %></div>
      <div style="color: #64748b; font-size: 0.875rem;"><%= user && user.role === 'ADMIN' ? 'Project Manager' : 'Team Member' %></div>
    </div>
  </div>
</div>

<!-- Task Creation Form -->
<form id="createTaskForm" style="margin-bottom: 2rem;">
  <input type="text" name="title" placeholder="Task Title" required>
  <input type="text" name="description" placeholder="Description">
  <select name="priority">
    <option value="LOW">Low</option>
    <option value="MEDIUM" selected>Medium</option>
    <option value="HIGH">High</option>
  </select>
  <button type="submit">Add Task</button>
</form>

<!-- Task Management Section -->
<div class="dashboard-main">
  <div class="analytics-section">
    <div class="section-header">
      <h2 class="section-title">Task Management</h2>
      <!-- The new task form is above -->
    </div>
    
    <!-- Task Filters -->
    <div style="display: flex; gap: 1rem; margin-bottom: 2rem;">
      <select class="filter-dropdown">
        <option>All Tasks</option>
        <option>Pending</option>
        <option>Completed</option>
        <option>In Progress</option>
      </select>
      <select class="filter-dropdown">
        <option>All Priorities</option>
        <option>High Priority</option>
        <option>Medium Priority</option>
        <option>Low Priority</option>
      </select>
    </div>

    <!-- Tasks List -->
    <div class="tasks-list">
      <% if (tasks && tasks.length > 0) { %>
        <% tasks.forEach(task => { %>
          <div class="task-item" data-task-id="<%= task.id %>">
            <div class="task-info">
              <h4><%= task.title %></h4>
              <p><%= task.description || 'No description' %></p>
              <div style="display: flex; gap: 1rem; margin-top: 0.5rem;">
                <span style="font-size: 0.75rem; color: #64748b;">Priority: <%= task.priority || 'Medium' %></span>
              </div>
            </div>
            <div style="display: flex; gap: 0.5rem; align-items: center;">
              <div class="task-status <%= task.completed ? 'status-completed' : 'status-pending' %>">
                <%= task.completed ? 'Completed' : 'Pending' %>
              </div>
              <button class="btn btn-secondary edit-task-btn" style="padding: 0.25rem 0.75rem; font-size: 0.75rem;">Edit</button>
              <button class="btn btn-secondary delete-task-btn" style="padding: 0.25rem 0.75rem; font-size: 0.75rem;">Delete</button>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <div class="task-item">
          <div class="task-info">
            <h4>No tasks found</h4>
            <p>Create your first task to get started</p>
          </div>
          <div class="task-status status-pending">Empty</div>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Task Statistics -->
  <div class="performance-card">
    <h2 class="performance-title">Task Statistics</h2>
    <div class="metric">
      <div class="metric-icon">üìù</div>
      <div class="metric-info">
        <h3><%= tasks ? tasks.length : 0 %></h3>
        <p>total tasks</p>
      </div>
    </div>
    <div class="metric">
      <div class="metric-icon">‚úÖ</div>
      <div class="metric-info">
        <h3><%= tasks ? tasks.filter(t => t.completed).length : 0 %></h3>
        <p>completed</p>
      </div>
    </div>
    <div class="metric">
      <div class="metric-icon">‚è≥</div>
      <div class="metric-info">
        <h3><%= tasks ? tasks.filter(t => !t.completed).length : 0 %></h3>
        <p>pending</p>
      </div>
    </div>
    <div class="metric">
      <div class="metric-icon">üìä</div>
      <div class="metric-info">
        <h3><%= tasks && tasks.length > 0 ? Math.round((tasks.filter(t => t.completed).length / tasks.length) * 100) : 0 %>%</h3>
        <p>completion rate</p>
      </div>
    </div>
  </div>
</div>

<script>
// Handle create task form submission
// This assumes you have a /graphql endpoint available
// and the user is authenticated if needed

document.getElementById('createTaskForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  const title = this.title.value;
  const description = this.description.value;
  const priority = this.priority.value;
  // You may want to add assignedTo, quest, etc. as needed

  const mutation = `
    mutation CreateTask($title: String!, $description: String, $priority: Priority) {
      createTask(title: $title, description: $description, priority: $priority) {
        id
        title
        description
        priority
      }
    }
  `;
  const variables = { title, description, priority };

  const res = await fetch('/graphql', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: mutation, variables })
  });
  const data = await res.json();
  if (data.data && data.data.createTask) {
    location.reload();
  } else {
    alert('Error creating task');
  }
});

// Handle delete task
// Add event listeners to all delete buttons
Array.from(document.getElementsByClassName('delete-task-btn')).forEach(btn => {
  btn.addEventListener('click', async function() {
    const taskId = this.closest('.task-item').getAttribute('data-task-id');
    if (!confirm('Are you sure you want to delete this task?')) return;
    const mutation = `
      mutation DeleteTask($id: ID!) {
        deleteTask(id: $id) { id }
      }
    `;
    const variables = { id: taskId };
    const res = await fetch('/graphql', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query: mutation, variables })
    });
    const data = await res.json();
    if (data.data && data.data.deleteTask) {
      location.reload();
    } else {
      alert('Error deleting task');
    }
  });
});

// You can similarly add edit functionality for tasks
// ...
</script>
