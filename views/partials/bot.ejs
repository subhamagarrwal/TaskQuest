<!-- Header -->
<div class="header">
  <h1>Manage Bot</h1>
  <div class="user-info">
    <div class="user-avatar">
      <%= user && user.username ? user.username.charAt(0).toUpperCase() : 'U' %>
    </div>
    <div>
      <div style="font-weight: 600;"><%= user && user.username ? user.username : 'User' %></div>
      <div style="color: #64748b; font-size: 0.875rem;"><%= user && user.role === 'ADMIN' ? 'Project Manager' : 'Team Member' %></div>
    </div>
  </div>
</div>

<!-- Bot Management Section -->
<div class="dashboard-main">
  <div class="analytics-section" style="grid-column: 1 / -1;">
    <div class="section-header">
      <h2 class="section-title">TaskQuest Bot Configuration</h2>
      <div style="display: flex; align-items: center; gap: 0.5rem;">
        <div style="width: 12px; height: 12px; background: #22c55e; border-radius: 50%;"></div>
        <span style="color: #22c55e; font-size: 0.875rem;">Bot Online</span>
      </div>
    </div>
    
    <!-- Bot Settings Cards -->
    <div style="margin-bottom: 2rem;">
      <div class="dashboard-card" style="width: 100%;">
        <div class="card-header">
          <div class="card-avatar" style="background: linear-gradient(45deg, #3b82f6, #1d4ed8); display: flex; align-items: center; justify-content: center; font-size: 1.5rem;">üí¨</div>
          <div class="card-info">
            <h3>Response Settings</h3>
            <p>Configure bot responses and command texts</p>
          </div>
        </div>
        <div style="margin: 0.75rem 0; padding: 0.75rem; background: rgba(59, 130, 246, 0.1); border-radius: 6px; font-size: 0.875rem; color: #94a3b8;">
          Customize command descriptions, response messages, and help text for all bot interactions
        </div>
        <button class="btn btn-primary" onclick="openResponseConfigModal()" style="width: 100%; margin-top: 1rem; padding: 0.875rem;">Configure Responses</button>
      </div>
    </div>

    <!-- Bot Commands -->
    <div style="background: rgba(15, 23, 42, 0.6); border: 1px solid rgba(71, 85, 105, 0.3); border-radius: 16px; padding: 1.5rem;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
        <h3>Available Commands</h3>
        <span style="color: #3b82f6; font-size: 0.875rem; font-weight: 500;">üìù Editable via Response Settings</span>
      </div>
      <div style="display: grid; gap: 1rem;" id="commandsList">
        <!-- Commands will be loaded dynamically here -->
        <div style="text-align: center; padding: 2rem; color: #64748b;">
          <div style="font-size: 2rem; margin-bottom: 1rem;">üîÑ</div>
          <div>Loading commands...</div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Response Configuration Modal -->
<div id="responseConfigModalOverlay" style="position: fixed; inset: 0; background: rgba(30,41,59,0.8); backdrop-filter: blur(8px); z-index: 10000; display: none; align-items: center; justify-content: center;">
  <div id="responseConfigModal" style="background: #1e293b; color: #ffffff; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); padding: 2rem; min-width: 600px; max-width: 90vw; max-height: 80vh; overflow-y: auto; position: relative; border: 1px solid rgba(255,255,255,0.1);">
    <button onclick="closeResponseConfigModal()" style="position: absolute; top: 1rem; right: 1rem; background: none; border: none; font-size: 1.5rem; color: #64748b; cursor: pointer; padding: 0.25rem;">&times;</button>
    
    
    <form id="responseConfigForm" style="text-align: left;">
      <div id="commandsContainer" style="display: grid; gap: 1.5rem;">
        <!-- Commands will be loaded dynamically here -->
        <div style="text-align: center; padding: 2rem; color: #64748b;">
          <div style="font-size: 2rem; margin-bottom: 1rem;">üîÑ</div>
          <div>Loading commands...</div>
        </div>
      </div>
      
      <div style="display: flex; gap: 1rem; margin-top: 2rem;">
        <button type="button" onclick="closeResponseConfigModal()" style="flex: 1; padding: 0.75rem; background: #64748b; color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer;">Cancel</button>
        <button type="submit" style="flex: 1; padding: 0.75rem; background: linear-gradient(45deg, #3b82f6, #2563eb); color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer; transition: all 0.2s;">‚öôÔ∏è Save Changes</button>
      </div>
    </form>
  </div>
</div>

<script>
// Global variables
let allCommands = [];

// Response Configuration Modal Functions
function openResponseConfigModal() {
  loadBotCommands();
  document.getElementById('responseConfigModalOverlay').style.display = 'flex';
}

function closeResponseConfigModal() {
  document.getElementById('responseConfigModalOverlay').style.display = 'none';
}

// Load bot commands from API
async function loadBotCommands() {
  try {
    const response = await fetch('/api/bot-commands', {
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include' // Include cookies for authentication
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    allCommands = await response.json();
    renderCommandsInModal();
    renderCommandsInUI();
  } catch (error) {
    console.error('Error loading bot commands:', error);
    showNotification('‚ùå Failed to load bot commands: ' + error.message, 'error');
    
    // Show error in modal if it's open
    const container = document.getElementById('commandsContainer');
    if (container) {
      container.innerHTML = `
        <div style="text-align: center; padding: 2rem; color: #ef4444;">
          <div style="font-size: 2rem; margin-bottom: 1rem;">‚ùå</div>
          <div>Failed to load commands</div>
          <button onclick="loadBotCommands()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;">Retry</button>
        </div>
      `;
    }
    
    // Show error in main UI
    const commandsList = document.getElementById('commandsList');
    if (commandsList) {
      commandsList.innerHTML = `
        <div style="text-align: center; padding: 2rem; color: #ef4444;">
          <div style="font-size: 2rem; margin-bottom: 1rem;">‚ùå</div>
          <div>Failed to load commands</div>
        </div>
      `;
    }
  }
}

// Render commands in the modal
function renderCommandsInModal() {
  const container = document.getElementById('commandsContainer');
  
  if (!allCommands.length) {
    container.innerHTML = `
      <div style="text-align: center; padding: 2rem; color: #64748b;">
        <div style="font-size: 2rem; margin-bottom: 1rem;">üì≠</div>
        <div>No commands found</div>
      </div>
    `;
    return;
  }

  const commandsHtml = allCommands.map(cmd => {
    const categoryColors = {
      'AUTH': '#3b82f6',
      'TASK_MANAGEMENT': '#22c55e', 
      'INFO': '#f59e0b',
      'UTILITY': '#8b5cf6'
    };
    
    const categoryColor = categoryColors[cmd.category] || '#64748b';
    
    return `
      <div style="padding: 1rem; background: rgba(71, 85, 105, 0.2); border-radius: 8px;" data-command-id="${cmd._id}">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
          <h4 style="color: #22c55e; margin: 0;">/${cmd.command}</h4>
          <div style="display: flex; gap: 0.5rem; align-items: center;">
            <span style="background: ${categoryColor}; color: white; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.75rem;">${cmd.category}</span>
            ${cmd.parameters ? `<span style="color: #64748b; font-size: 0.75rem;">${cmd.parameters}</span>` : ''}
          </div>
        </div>
        <div style="margin-bottom: 0.75rem;">
          <label style="display: block; margin-bottom: 0.25rem; color: #e2e8f0; font-size: 0.875rem;">Description:</label>
          <input type="text" 
                 data-field="description" 
                 value="${cmd.description.replace(/"/g, '&quot;')}" 
                 style="width: 100%; padding: 0.5rem; border-radius: 6px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.875rem;">
        </div>
        <div style="margin-bottom: 0.75rem;">
          <label style="display: block; margin-bottom: 0.25rem; color: #e2e8f0; font-size: 0.875rem;">Response Message:</label>
          <textarea data-field="responseMessage" 
                    style="width: 100%; padding: 0.5rem; border-radius: 6px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.875rem; min-height: 60px; resize: vertical;">${cmd.responseMessage.replace(/"/g, '&quot;')}</textarea>
        </div>
        <div style="display: flex; align-items: center; gap: 0.5rem;">
          <input type="checkbox" 
                 data-field="isActive" 
                 ${cmd.isActive ? 'checked' : ''} 
                 style="margin: 0;">
          <label style="color: #e2e8f0; font-size: 0.875rem; margin: 0;">Active</label>
        </div>
      </div>
    `;
  }).join('');

  container.innerHTML = commandsHtml;
}

// Render commands in the main UI (command list)
function renderCommandsInUI() {
  const commandsList = document.getElementById('commandsList');
  if (!commandsList) return;

  const commandsHtml = allCommands
    .filter(cmd => cmd.isActive)
    .map(cmd => `
      <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: rgba(71, 85, 105, 0.2); border-radius: 8px;">
        <div>
          <code style="color: #22c55e;">/${cmd.command}</code>
          <span style="margin-left: 1rem; color: #64748b;">${cmd.description}</span>
          ${cmd.parameters ? `<span style="margin-left: 0.5rem; color: #94a3b8; font-size: 0.8rem;">${cmd.parameters}</span>` : ''}
        </div>
        <span style="color: #64748b; font-size: 0.875rem;">Active</span>
      </div>
    `).join('');

  commandsList.innerHTML = commandsHtml;
}

// Handle response configuration form submission
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('responseConfigForm');
  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitBtn = this.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = 'üîÑ Saving...';
      
      try {
        // Collect all the form data
        const commandsData = [];
        const commandContainers = document.querySelectorAll('[data-command-id]');
        
        commandContainers.forEach(container => {
          const commandId = container.getAttribute('data-command-id');
          const command = allCommands.find(cmd => cmd._id === commandId);
          
          if (command) {
            commandsData.push({
              command: command.command,
              description: container.querySelector('[data-field="description"]').value,
              responseMessage: container.querySelector('[data-field="responseMessage"]').value,
              isActive: container.querySelector('[data-field="isActive"]').checked
            });
          }
        });
        
        console.log('üíæ Saving bot response configuration:', commandsData);
        
        // Send to API
        const response = await fetch('/api/bot-commands/bulk-update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include', // Include cookies for authentication
          body: JSON.stringify({ commands: commandsData })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const updatedCommands = await response.json();
        console.log('‚úÖ Commands updated:', updatedCommands);
        
        // Reload commands to reflect changes
        await loadBotCommands();
        
        // Show success message
        showNotification('‚úÖ Bot responses updated successfully!', 'success');
        
        // Close modal
        closeResponseConfigModal();
        
      } catch (error) {
        console.error('‚ùå Error saving bot responses:', error);
        showNotification('‚ùå Failed to save bot responses: ' + error.message, 'error');
      } finally {
        // Re-enable button
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });
  }

  // Load commands on page load
  loadBotCommands();
});

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    closeResponseConfigModal();
  }
});

// Close modal when clicking on overlay background
document.addEventListener('DOMContentLoaded', function() {
  const overlay = document.getElementById('responseConfigModalOverlay');
  if (overlay) {
    overlay.addEventListener('click', function(e) {
      if (e.target === overlay) {
        closeResponseConfigModal();
      }
    });
  }
});

// Notification function (reuse from other parts of the app)
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `flash-notification flash-${type}`;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 10001;
    background: ${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#3b82f6'};
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    animation: slideInRight 0.3s ease-out;
  `;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.style.animation = 'slideOutRight 0.3s ease-in';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}
</script>