<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TaskQuest Dashboard</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="/css/flash.css">
    <script src="/js/graphql-client.js"></script>
    <script>
      // Pass user data to frontend - ensure IDs are strings
      window.currentUserId = '<%= user._id.toString() %>';
      window.currentUser = {
        id: '<%= user._id.toString() %>',
        username: '<%= user.username %>',
        email: '<%= user.email %>',
        role: '<%= user.role %>'
      };
      
      // Set current quest ID if available
      <% if (typeof quests !== 'undefined' && quests && quests.length > 0) { %>
        window.currentQuestId = '<%= quests[0]._id.toString() %>';
      <% } %>
    </script>
</head>
<body>
  <script>
    // Initialize GraphQL client
    window.graphqlClient = new GraphQLClient('/graphql');
  </script>

  <!-- Flash Messages -->
  <% if (locals.success && success.length > 0) { %>
    <div id="flash-success" class="flash-notification flash-success">
      <div class="flash-content">
        <div class="flash-icon">✅</div>
        <div class="flash-text"><%= success[0] %></div>
        <button class="flash-close" onclick="closeFlash('flash-success')">&times;</button>
      </div>
      <div class="flash-progress"></div>
    </div>
  <% } %>
  <% if (locals.error && error.length > 0) { %>
    <div id="flash-error" class="flash-notification flash-error">
      <div class="flash-content">
        <div class="flash-icon">❌</div>
        <div class="flash-text"><%= error[0] %></div>
        <button class="flash-close" onclick="closeFlash('flash-error')">&times;</button>
      </div>
      <div class="flash-progress"></div>
    </div>
  <% } %>
  <% if (locals.info && info.length > 0) { %>
    <div id="flash-info" class="flash-notification flash-info">
      <div class="flash-content">
        <div class="flash-icon">ℹ️</div>
        <div class="flash-text"><%= info[0] %></div>
        <button class="flash-close" onclick="closeFlash('flash-info')">&times;</button>
      </div>
      <div class="flash-progress"></div>
    </div>
  <% } %>

  <% if (typeof showCreateQuestPrompt !== 'undefined' && showCreateQuestPrompt) { %>
    <div id="questModalOverlay" style="position: fixed; inset: 0; background: rgba(30,41,59,0.8); backdrop-filter: blur(8px); z-index: 10000; display: flex; align-items: center; justify-content: center;">
      <div id="questModal" style="background: #1e293b; color: #ffffff; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); padding: 2rem; min-width: 400px; max-width: 90vw; text-align: center; position: relative; border: 1px solid rgba(255,255,255,0.1);">
        <button onclick="closeQuestModal()" style="position: absolute; top: 1rem; right: 1rem; background: none; border: none; font-size: 1.5rem; color: #64748b; cursor: pointer; padding: 0.25rem;">&times;</button>
        <div style="font-size: 3rem; margin-bottom: 1rem;">🚩</div>
        <div style="font-weight: 700; font-size: 1.4rem; margin-bottom: 0.5rem; color: #ffffff;">Welcome to TaskQuest!</div>
        <div style="margin-bottom: 1.5rem; color: #94a3b8;">Create your first quest to begin your adventure and start managing tasks effectively.</div>
        <form id="createQuestForm" style="text-align: left;">
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Quest Title *</label>
            <input type="text" name="title" placeholder="e.g., Complete Project Setup" required style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
          </div>
          <div style="margin-bottom: 1rem;">
            <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Description</label>
            <textarea name="description" placeholder="Describe what this quest involves..." style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem; min-height: 80px; resize: vertical;"></textarea>
          </div>
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; margin-bottom: 0.5rem; color: #e2e8f0; font-weight: 500;">Target Completion Date</label>
            <input type="date" name="completionDate" style="width: 100%; padding: 0.75rem; border-radius: 8px; border: 1px solid #475569; background: #334155; color: #ffffff; font-size: 0.9rem;">
          </div>
          <button type="submit" style="width: 100%; padding: 0.75rem; background: linear-gradient(45deg, #8b5cf6, #7c3aed); color: white; border: none; border-radius: 8px; font-weight: 600; font-size: 1rem; cursor: pointer; transition: all 0.2s;">🎯 Create Quest</button>
        </form>
      </div>
    </div>
  <% } %>

  <!-- Mobile Menu Toggle -->
  <div class="mobile-menu-toggle" id="mobileMenuToggle">
    <div class="hamburger" id="hamburger">
      <span></span>
      <span></span>
      <span></span>
    </div>
  </div>

  <!-- Mobile Overlay -->
  <div class="mobile-overlay" id="mobileOverlay"></div>

  <!-- Sidebar -->
  <div class="sidebar" id="sidebar" style="height: 100vh; display: flex; flex-direction: column;">
    <div>
      <div class="logo">
        <img src="/taskquest-icon-static.svg" alt="TaskQuest" style="width: 32px; height: 32px;">
        <span style="font-weight: 600; font-size: 1.2rem;">TaskQuest</span>
      </div>    
      
      <!-- Simple Navigation -->
      <nav style="display: flex; flex-direction: column; gap: 0.5rem;">
        <a href="/dashboard?section=overview" class="nav-item <%= typeof activeSection !== 'undefined' && activeSection === 'overview' ? 'active' : '' %>">
          <div class="nav-icon" style="mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"/></svg>')"></div>
          📊 Overview
        </a>

        <a href="/dashboard?section=tasks" class="nav-item <%= typeof activeSection !== 'undefined' && activeSection === 'tasks' ? 'active' : '' %>">
          <div class="nav-icon" style="mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"/></svg>')"></div>
          ✅ Tasks
        </a>

        <a href="/dashboard?section=quests" class="nav-item <%= typeof activeSection !== 'undefined' && activeSection === 'quests' ? 'active' : '' %>">
          <div class="nav-icon" style="mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-1.5l-6-3-6 3a1 1 0 000 1.732l6 3 6-3a1 1 0 000-1.732z\"/></svg>')"></div>
          👥 Team Members
        </a>

        <a href="/dashboard?section=bot" class="nav-item <%= typeof activeSection !== 'undefined' && activeSection === 'bot' ? 'active' : '' %>">
          <div class="nav-icon" style="mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 11c0-1.104.896-2 2-2s2 .896 2 2-.896 2 2-2 2 .896 2 2zm0 0V7m0 4v4m0 0c0 1.104-.896 2-2 2s-2-.896-2-2 .896-2 2-2 2 .896 2 2z\"/></svg>')"></div>
          🤖 Bot Analytics
        </a>
      </nav>
        </a>
      </div>

      <div class="nav-section" id="logoutSection" style="margin-top: auto; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 1rem;">
        <div class="nav-title" style="color: #ef4444;">🚪 Logout</div>
        <a href="/logout" class="nav-item" style="background: rgba(239, 68, 68, 0.1); border: 1px solid rgba(239, 68, 68, 0.3); color: #ef4444;">
          <div class="nav-icon" style="mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a2 2 0 002 2h3a2 2 0 002-2v-1m0-8V7a2 2 0 00-2-2h-3a2 2 0 00-2 2v1\"/></svg>'); background-color: #ef4444;"></div>
          Logout
        </a>
      </div>

    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <% if (typeof activeSection !== 'undefined' && activeSection === 'overview') { %>
      <%- include('partials/overview', { user, tasks, quests }) %>
    <% } else if (typeof activeSection !== 'undefined' && activeSection === 'tasks') { %>
      <%- include('partials/tasks', { user, tasks, quests }) %>
    <% } else if (typeof activeSection !== 'undefined' && activeSection === 'quests') { %>
      <%- include('partials/quests', { user, quests, tasks, allUsers }) %>
    <% } else if (typeof activeSection !== 'undefined' && activeSection === 'bot') { %>
      <%- include('partials/bot', { user }) %>
    <% } else { %>
      <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; text-align: center;">
        <div style="font-size: 4rem; margin-bottom: 2rem;">🎯</div>
        <h2 style="color: #ffffff; margin-bottom: 1rem; font-size: 2rem;">Welcome to TaskQuest Dashboard</h2>
        <p style="color: #64748b; font-size: 1.1rem; margin-bottom: 2rem; max-width: 500px;">Select any section from the sidebar to get started with managing your tasks, quests, and bot configuration.</p>
      </div>
    <% } %>
  </div>
  <script>
    // Flash message functions for success/error notifications
    function closeFlash(flashId) {
      const flashElement = document.getElementById(flashId);
      if (flashElement) {
        flashElement.classList.add('flash-out');
        setTimeout(() => {
          flashElement.remove();
        }, 300);
      }
    }

    // Auto-hide flash messages after 3 seconds
    document.addEventListener('DOMContentLoaded', function() {
      const flashMessages = document.querySelectorAll('.flash-notification');
      flashMessages.forEach(msg => {
        setTimeout(() => {
          if (msg.parentNode) {
            msg.classList.add('flash-out');
            setTimeout(() => {
              if (msg.parentNode) {
                msg.remove();
              }
            }, 300);
          }
        }, 3000);
      });
    });

    // Quest Modal Functions - Handle popup for creating first quest
    function closeQuestModal() {
      const modal = document.getElementById('questModalOverlay');
      if (modal) {
        modal.style.display = 'none';
      }
    }

    function openQuestModal() {
      const modal = document.getElementById('questModalOverlay');
      if (modal) {
        modal.style.display = 'flex';
      }
    }

    // Allow closing modal with Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closeQuestModal();
      }
    });

    // Close modal when clicking on overlay background
    document.addEventListener('DOMContentLoaded', function() {
      const overlay = document.getElementById('questModalOverlay');
      if (overlay) {
        overlay.addEventListener('click', function(e) {
          if (e.target === overlay) {
            closeQuestModal();
          }
        });
      }
    });

    // Handle create quest form submission - USE GRAPHQL
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('createQuestForm');
      if (form) {
        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          // Get form data
          const title = this.title.value.trim();
          const description = this.description.value.trim();
          const completionDate = this.completionDate.value;
          
          // Validate title is not empty
          if (!title) {
            alert('Quest title is required!');
            return;
          }
          
          // Disable submit button to prevent double submission
          const submitBtn = this.querySelector('button[type="submit"]');
          const originalText = submitBtn.textContent;
          submitBtn.disabled = true;
          submitBtn.textContent = '🔄 Creating...';
          
          try {
            console.log('🎯 Submitting quest via GraphQL:', { title, description, completionDate });
            
            // Use GraphQL client to create quest
            const data = await window.graphqlClient.createQuest(title, description, completionDate);
            console.log('✅ Quest created successfully:', data);
            
            // Generate admin code for the new quest
            if (data && data.createQuest && data.createQuest.id) {
              try {
                console.log('🔑 Generating admin code for new quest...');
                const codeResponse = await fetch('/api/codes/generate-quest-code', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token') || document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1]}`
                  },
                  body: JSON.stringify({ questId: data.createQuest.id })
                });
                
                const codeResult = await codeResponse.json();
                
                if (codeResponse.ok) {
                  console.log('✅ Admin code generated:', codeResult);
                  
                  // Show success modal with admin code
                  showQuestCreatedModal(data.createQuest, codeResult);
                } else {
                  console.warn('⚠️ Quest created but admin code generation failed:', codeResult.error);
                  // Still show success, but mention code generation issue
                  window.location.reload();
                }
              } catch (codeError) {
                console.warn('⚠️ Quest created but admin code generation failed:', codeError);
                // Still show success, but reload without code modal
                window.location.reload();
              }
            } else {
              // Success - reload the page to show the new quest
              window.location.reload();
            }
            
          } catch (error) {
            console.error('❌ Error creating quest:', error);
            
            // Show user-friendly error message for single quest limitation
            if (error.message.includes('Only one quest is allowed')) {
              alert('⚠️ Only One Quest Allowed\n\nTaskQuest is designed to focus on a single quest at a time. Please edit your existing quest instead of creating a new one.\n\nYou can modify the quest details in the Quests section.');
            } else {
              alert('Error creating quest: ' + error.message);
            }
            
            // Re-enable button
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
          }
        });
      }
    });

    // Show quest created modal with admin code
    function showQuestCreatedModal(quest, codeResult) {
      const modal = document.createElement('div');
      modal.style.cssText = 'position: fixed; inset: 0; background: rgba(30,41,59,0.8); backdrop-filter: blur(8px); z-index: 10001; display: flex; align-items: center; justify-content: center;';
      
      modal.innerHTML = `
        <div style="background: #1e293b; color: #ffffff; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.4); padding: 2rem; min-width: 500px; max-width: 90vw; text-align: center; position: relative; border: 1px solid rgba(255,255,255,0.1);">
          <div style="font-size: 3rem; margin-bottom: 1rem;">🎉</div>
          <div style="font-weight: 700; font-size: 1.4rem; margin-bottom: 0.5rem; color: #ffffff;">Quest Created Successfully!</div>
          <div style="margin-bottom: 1.5rem; color: #94a3b8;">Your quest "${quest.title}" has been created and your admin code is ready.</div>
          
          <div style="background: #334155; border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem; border-left: 4px solid #8b5cf6;">
            <h4 style="color: #8b5cf6; margin-bottom: 1rem;">👑 Your Admin Code</h4>
            <div style="font-family: monospace; font-size: 1.5rem; color: #e2e8f0; font-weight: bold; margin-bottom: 1rem; letter-spacing: 2px;">${codeResult.adminCode}</div>
            <button onclick="copyToClipboard('${codeResult.adminCode}'); this.textContent='✅ Copied!'; setTimeout(() => this.textContent='📋 Copy Code', 2000)" class="btn btn-primary" style="background: #8b5cf6; margin-bottom: 1rem;">📋 Copy Code</button>
            
            <div style="text-align: left;">
              <small style="color: #94a3b8; display: block; margin-bottom: 0.5rem;">Telegram Bot Link:</small>
              <div style="background: #1e293b; padding: 0.75rem; border-radius: 6px; word-break: break-all;">
                <a href="${codeResult.botLink}" target="_blank" style="color: #60a5fa; font-size: 0.9rem;">${codeResult.botLink}</a>
              </div>
              <button onclick="copyToClipboard('${codeResult.botLink}'); this.textContent='✅ Copied!'; setTimeout(() => this.textContent='📋 Copy Link', 2000)" class="btn btn-secondary" style="margin-top: 0.5rem; font-size: 0.8rem;">📋 Copy Link</button>
            </div>
          </div>
          
          <div style="background: rgba(59, 130, 246, 0.1); border-radius: 8px; padding: 1rem; margin-bottom: 1rem; border: 1px solid rgba(59, 130, 246, 0.3);">
            <h4 style="color: #60a5fa; margin-bottom: 0.5rem; font-size: 1rem;">📱 Next Steps:</h4>
            <ol style="text-align: left; color: #94a3b8; font-size: 0.9rem; margin: 0; padding-left: 1.2rem;">
              <li>Open Telegram and search for the TaskQuest bot</li>
              <li>Click "Start" or use the bot link above</li>
              <li>Choose "Register as Admin"</li>
              <li>Enter your admin code when prompted</li>
              <li>Add team members and generate user codes in the Team section!</li>
            </ol>
          </div>
          
          <div style="display: flex; gap: 1rem;">
            <button onclick="this.closest('div').parentElement.remove(); window.location.href='/dashboard?section=quests'" class="btn btn-primary" style="flex: 1; background: linear-gradient(45deg, #22c55e, #16a34a);">
              👥 Manage Team
            </button>
            <button onclick="this.closest('div').parentElement.remove(); window.location.reload()" class="btn btn-secondary" style="flex: 1; background: #64748b;">
              ✅ Continue
            </button>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
    }

    // Helper function for copying to clipboard
    function copyToClipboard(text) {
      navigator.clipboard.writeText(text).then(() => {
        console.log('📋 Copied to clipboard:', text);
      }).catch(err => {
        console.error('❌ Failed to copy to clipboard:', err);
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
      });
    }

    // Mobile menu functionality
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const hamburger = document.getElementById('hamburger');
    const sidebar = document.getElementById('sidebar');
    const mobileOverlay = document.getElementById('mobileOverlay');

    function toggleMobileMenu() {
      hamburger.classList.toggle('open');
      sidebar.classList.toggle('active');
      mobileOverlay.classList.toggle('active');
      document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
    }

    mobileMenuToggle.addEventListener('click', toggleMobileMenu);
    mobileOverlay.addEventListener('click', toggleMobileMenu);

    // Close mobile menu on window resize if screen becomes larger
    window.addEventListener('resize', function() {
      if (window.innerWidth > 768) {
        hamburger.classList.remove('open');
        sidebar.classList.remove('active');
        mobileOverlay.classList.remove('active');
        document.body.style.overflow = '';
      }
    });

    // Close mobile menu when nav item is clicked
    document.querySelectorAll('.nav-item').forEach(item => {
      item.addEventListener('click', function() {
        if (window.innerWidth <= 768) {
          toggleMobileMenu();
        }
      });
    });

    // Simulate real-time updates for progress bars
    setInterval(() => {
      const progressBars = document.querySelectorAll('.progress-fill');
      progressBars.forEach(bar => {
        const currentWidth = parseInt(bar.style.width);
        if (currentWidth < 100) {
          bar.style.width = (currentWidth + Math.random() * 2) + '%';
        }
      });
    }, 5000);

    // Handle modal opening from overview navigation
    // Check if we should open task modal (when coming from overview)
    if (sessionStorage.getItem('openTaskModal') === 'true') {
      sessionStorage.removeItem('openTaskModal');
      // Small delay to ensure DOM is ready and section is loaded
      setTimeout(() => {
        if (typeof openTaskModal === 'function') {
          openTaskModal();
        }
      }, 200);
    }

    // Real-time notification polling for bot updates
    let lastNotificationCheck = null;
    
    function pollForUpdates() {
      const url = lastNotificationCheck 
        ? `/api/notifications?lastCheck=${lastNotificationCheck}`
        : '/api/notifications';
        
      fetch(url, {
        headers: {
          'Authorization': `Bearer ${document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1] || ''}`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success && data.notifications.length > 0) {
          console.log('📢 Received notifications:', data.notifications);
          
          // Check if any task updates occurred
          const taskUpdates = data.notifications.filter(n => n.eventType === 'task_updated');
          
          if (taskUpdates.length > 0) {
            console.log('🔄 Task updates detected, refreshing display...');
            
            // Show a subtle notification to user
            showUpdateNotification(`${taskUpdates.length} task(s) updated via bot`);
            
            // If we're on the tasks or overview section, refresh the content
            const currentSection = new URLSearchParams(window.location.search).get('section');
            if (currentSection === 'tasks' || currentSection === 'overview' || !currentSection) {
              // Refresh task data without full page reload
              setTimeout(() => {
                window.location.reload();
              }, 2000); // Give user time to see the notification
            }
          }
        }
        
        lastNotificationCheck = data.timestamp;
      })
      .catch(error => {
        console.error('Error polling for updates:', error);
      });
    }
    
    function showUpdateNotification(message) {
      // Create a subtle notification
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(45deg, #22c55e, #16a34a);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 10000;
        font-weight: 600;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
      `;
      notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem;">
          <span>🔄</span>
          <span>${message}</span>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
      }, 100);
      
      // Animate out and remove
      setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }
    
    // Start polling every 5 seconds for real-time updates
    pollForUpdates(); // Initial call
    setInterval(pollForUpdates, 5000);

    console.log('🔄 Real-time update polling started');
    
    // Check if we should open user modal (when coming from overview)
    if (sessionStorage.getItem('openUserModal') === 'true') {
      sessionStorage.removeItem('openUserModal');
      // Small delay to ensure DOM is ready and section is loaded
      setTimeout(() => {
        if (typeof openUserModal === 'function') {
          openUserModal();
        }
      }, 200);
    }
  </script>
</body>
</html>

