<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TaskQuest - Transform Your Workflow Into Epic Adventures</title>
  <link href="/styles.css" rel="stylesheet">
  <link href="/taskquest-icon.css" rel="stylesheet">
  <link rel="icon" type="image/svg+xml" href="/taskquest-icon.svg">
  <style>
    @keyframes float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-20px); }
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    .float { animation: float 6s ease-in-out infinite; }
    .pulse { animation: pulse 2s ease-in-out infinite; }
    
    html { scroll-behavior: smooth; }
  </style>
</head>
<body class="bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 min-h-screen relative overflow-x-hidden">
  <!-- Flash Messages -->
  <% if (locals.success && success.length > 0) { %>
    <div id="flash-success" class="flash-notification flash-success">
      <div class="flash-content">
        <div class="flash-icon">‚úÖ</div>
        <div class="flash-text"><%= success[0] %></div>
        <button class="flash-close" onclick="closeFlash('flash-success')">&times;</button>
      </div>
      <div class="flash-progress"></div>
    </div>
  <% } %>
  <% if (locals.error && error.length > 0) { %>
    <div id="flash-error" class="flash-notification flash-error">
      <div class="flash-content">
        <div class="flash-icon">‚ùå</div>
        <div class="flash-text"><%= error[0] %></div>
        <button class="flash-close" onclick="closeFlash('flash-error')">&times;</button>
      </div>
      <div class="flash-progress"></div>
    </div>
  <% } %>
  <% if (locals.info && info.length > 0) { %>
    <div id="flash-info" class="flash-notification flash-info">
      <div class="flash-content">
        <div class="flash-icon">‚ÑπÔ∏è</div>
        <div class="flash-text"><%= info[0] %></div>
        <button class="flash-close" onclick="closeFlash('flash-info')">&times;</button>
      </div>
      <div class="flash-progress"></div>
    </div>
  <% } %>

  <style>
    .flash-notification {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      min-width: 320px;
      max-width: 400px;
      border-radius: 12px;
      backdrop-filter: blur(10px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
      transform: translateX(100%);
      animation: slideIn 0.3s ease-out forwards;
      overflow: hidden;
    }

    .flash-success {
      background: linear-gradient(135deg, rgba(34, 197, 94, 0.95), rgba(22, 163, 74, 0.95));
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .flash-error {
      background: linear-gradient(135deg, rgba(239, 68, 68, 0.95), rgba(220, 38, 38, 0.95));
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .flash-info {
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.95), rgba(37, 99, 235, 0.95));
      border: 1px solid rgba(59, 130, 246, 0.3);
    }

    .flash-content {
      display: flex;
      align-items: center;
      padding: 16px 20px;
      color: white;
      position: relative;
    }

    .flash-icon {
      font-size: 20px;
      margin-right: 12px;
      flex-shrink: 0;
    }

    .flash-text {
      flex: 1;
      font-weight: 500;
      font-size: 14px;
      line-height: 1.4;
    }

    .flash-close {
      background: none;
      border: none;
      color: white;
      font-size: 24px;
      font-weight: bold;
      cursor: pointer;
      margin-left: 12px;
      padding: 0;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: background-color 0.2s ease;
    }

    .flash-close:hover {
      background-color: rgba(255, 255, 255, 0.2);
    }

    .flash-progress {
      height: 3px;
      background: rgba(255, 255, 255, 0.9);
      width: 100%;
      transform: translateX(-100%);
      animation: progressBar 3s linear forwards;
    }

    @keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @keyframes slideOut {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(100%);
        opacity: 0;
      }
    }

    @keyframes progressBar {
      from {
        transform: translateX(-100%);
      }
      to {
        transform: translateX(0);
      }
    }

    .flash-notification.flash-out {
      animation: slideOut 0.3s ease-in forwards;
    }

    /* Multiple flash messages stacking */
    .flash-notification:nth-child(2) { top: 100px; }
    .flash-notification:nth-child(3) { top: 180px; }
    .flash-notification:nth-child(4) { top: 260px; }
  </style>

  <!-- Background Effects -->
  <div class="absolute inset-0 bg-black opacity-20"></div>
  <div class="absolute inset-0">
    <div class="absolute top-20 left-10 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-30 float"></div>
    <div class="absolute top-40 right-10 w-72 h-72 bg-yellow-500 rounded-full mix-blend-multiply filter blur-xl opacity-30 float" style="animation-delay: 2s;"></div>
    <div class="absolute -bottom-8 left-20 w-72 h-72 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-30 float" style="animation-delay: 4s;"></div>
  </div>

  <!-- Navigation -->
  <nav class="relative z-10 p-6">
    <div class="flex justify-between items-center max-w-7xl mx-auto">
      <a href="/" class="taskquest-logo">
        <img src="/taskquest-icon-static.svg" alt="TaskQuest" class="taskquest-icon taskquest-icon-md taskquest-icon-responsive taskquest-icon-glow" />
        <span class="taskquest-logo-text text-2xl">TaskQuest</span>
      </a>
      <div class="hidden md:flex space-x-8 text-white">
        <a href="#features" class="hover:text-purple-300 transition">Features</a>
        <a href="#how-it-works" class="hover:text-purple-300 transition">How It Works</a>
      </div>
      <div class="flex space-x-4">
        <button class="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-2 rounded-lg hover:from-purple-600 hover:to-pink-600 transition open-auth-modal">Get Started</button>

      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="relative z-10 text-center py-20 px-6">
    <div class="max-w-6xl mx-auto">
      <div class="mb-8">
        <!-- Large Hero Icon (animated SVG inline) -->
        <div class="mx-auto mb-6" style="width:120px;height:120px;">
          <object type="image/svg+xml" data="/taskquest-icon.svg" width="120" height="120" aria-label="TaskQuest Animated Icon"></object>
        </div>
        <h1 class="text-5xl md:text-7xl font-bold text-white mb-6 leading-tight">
          Transform Your <span class="bg-gradient-to-r from-yellow-400 to-pink-400 bg-clip-text text-transparent">Workflow</span><br>
          Into Epic <span class="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">Adventures</span>
        </h1>
        <p class="text-xl md:text-2xl text-purple-200 mb-8 max-w-4xl mx-auto leading-relaxed">
          Turn team tasks into thrilling quests. Admins create tasks on the web dashboard, share bot links with team members, 
          and track progress through an intelligent Telegram bot interface.
        </p>
      </div>

      <!-- CTA Buttons -->
      <div class="flex flex-col md:flex-row gap-4 justify-center mb-16">
        <button class="bg-gradient-to-r from-yellow-400 to-orange-500 text-black px-8 py-4 rounded-xl text-lg font-semibold hover:from-yellow-500 hover:to-orange-600 transition transform hover:scale-105 shadow-lg open-auth-modal">
          üöÄ Start Your Quest
        </button>

      </div>

      <!-- Auth Modal Popup -->
      <div id="auth-modal" class="fixed inset-0 z-50 flex items-center justify-center backdrop-blur-sm hidden">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full relative animate-fade-in">
          <button id="close-modal-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-2xl font-bold">&times;</button>
          <h2 class="text-2xl font-bold text-center mb-6 text-purple-700">Sign In to TaskQuest</h2>
          <div class="flex flex-col gap-4">
            <!-- Google Sign-In -->
            <button id="google-signin-btn" class="w-full flex items-center justify-center gap-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-3 rounded-lg font-semibold text-lg hover:from-blue-600 hover:to-purple-600 transition">
              <img src="/taskquest-icon-static.svg" alt="Google" class="w-6 h-6"> Sign in with Google
            </button>
            <div class="flex items-center gap-2 my-2">
              <hr class="flex-1 border-gray-300"> <span class="text-gray-400 text-sm">or</span> <hr class="flex-1 border-gray-300">
            </div>
            <!-- Phone OTP Sign-In -->
            <form id="phone-form" class="flex flex-col gap-3">
              <input type="text" id="phone" placeholder="Enter phone e.g. +1234567890" required class="border border-gray-300 rounded-lg px-4 py-2 focus:border-purple-500 outline-none" />
              <div id="recaptcha-container" class="flex justify-center"></div>
              <button type="submit" class="bg-purple-600 text-white rounded-lg px-4 py-2 font-semibold hover:bg-purple-700 transition">Send OTP</button>
            </form>
            <form id="otp-form" class="flex flex-col gap-3 hidden">
              <input type="text" id="otp" placeholder="Enter OTP" required class="border border-gray-300 rounded-lg px-4 py-2 focus:border-purple-500 outline-none" />
              <button type="submit" class="bg-green-600 text-white rounded-lg px-4 py-2 font-semibold hover:bg-green-700 transition">Verify OTP</button>
            </form>
            <div id="result" class="text-center text-purple-700 font-semibold mt-2 min-h-[1.5em]"></div>
          </div>
        </div>
      </div>

      <!-- Feature Cards -->
      <div id="features" class="grid md:grid-cols-3 gap-8 mb-20">
        <div class="bg-gradient-to-br from-purple-600 to-purple-800 bg-opacity-30 backdrop-blur-sm p-6 rounded-xl border border-purple-400 border-opacity-30 hover:from-purple-500 hover:to-purple-700 transition">
          <img src="/taskquest-icon-static.svg" alt="Web Dashboard" class="taskquest-icon taskquest-icon-lg mx-auto mb-4" />
          <h3 class="text-xl font-semibold text-white mb-2">Web Dashboard</h3>
          <p class="text-purple-200">Admins create quests, assign tasks, and manage team progress from a powerful web-based control center.</p>
        </div>
        <div class="bg-gradient-to-br from-blue-600 to-cyan-800 bg-opacity-30 backdrop-blur-sm p-6 rounded-xl border border-blue-400 border-opacity-30 hover:from-blue-500 hover:to-cyan-700 transition">
          <div class="text-4xl mb-4">ü§ñ</div>
          <h3 class="text-xl font-semibold text-white mb-2">Telegram Bot</h3>
          <p class="text-purple-200">Team members interact with TaskQuest bot on Telegram to view tasks, update progress, and get notifications.</p>
        </div>
        <div class="bg-gradient-to-br from-pink-600 to-rose-800 bg-opacity-30 backdrop-blur-sm p-6 rounded-xl border border-pink-400 border-opacity-30 hover:from-pink-500 hover:to-rose-700 transition">
          <div class="text-4xl mb-4">ÔøΩ</div>
          <h3 class="text-xl font-semibold text-white mb-2">Easy Connection</h3>
          <p class="text-purple-200">Simple bot links connect team members instantly - no complex setup or app downloads required.</p>
        </div>
      </div>
    </div>
  </section>

  <!-- How It Works Section -->
  <section id="how-it-works" class="relative z-10 py-20 px-6">
    <div class="max-w-6xl mx-auto">
      <h2 class="text-4xl md:text-5xl font-bold text-center text-white mb-16">How The Magic Works</h2>
      
      <div class="space-y-12">
        <!-- Step 1 -->
        <div class="flex flex-col md:flex-row items-center gap-8">
          <div class="md:w-1/2">
            <div class="bg-gradient-to-r from-purple-500 to-pink-500 w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-xl mb-4">1</div>
            <h3 class="text-2xl font-semibold text-white mb-4">üåê Admin Creates Tasks</h3>
            <p class="text-purple-200 text-lg">Admins log into the web dashboard, create epic quests, and assign tasks to team members using their contact details.</p>
          </div>
          <div class="md:w-1/2">
            <div class="bg-gradient-to-br from-purple-700 to-indigo-800 bg-opacity-50 backdrop-blur-sm p-6 rounded-xl border border-purple-400 border-opacity-30 text-center">
              <div class="taskquest-icon taskquest-icon-xl mx-auto mb-4"></div>
              <p class="text-white">Quest: "Website Launch Mission"</p>
              <p class="text-purple-200 text-sm">3 tasks created and assigned</p>
            </div>
          </div>
        </div>

        <!-- Step 2 -->
        <div class="flex flex-col md:flex-row-reverse items-center gap-8">
          <div class="md:w-1/2">
            <div class="bg-gradient-to-r from-blue-500 to-cyan-500 w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-xl mb-4">2</div>
            <h3 class="text-2xl font-semibold text-white mb-4">ÔøΩ Share Bot Link</h3>
            <p class="text-purple-200 text-lg">Admin shares the TaskQuest bot link with team members. No complex setup - just click and start chatting with the bot!</p>
          </div>
          <div class="md:w-1/2">
            <div class="bg-green-600 bg-opacity-20 backdrop-blur-sm p-6 rounded-xl border border-green-400 border-opacity-30">
              <div class="text-left">
                <div class="text-3xl mb-2">ü§ñ</div>
                <p class="text-white text-sm">"Here's your TaskQuest bot link:"</p>
                <p class="text-green-200 text-sm">"t.me/TaskQuestBot?start=auth_ABC123"</p>
                <div class="mt-2 text-xs text-green-300">‚úì Shared via email, chat, or any messaging app</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 3 -->
        <div class="flex flex-col md:flex-row items-center gap-8">
          <div class="md:w-1/2">
            <div class="bg-gradient-to-r from-yellow-500 to-orange-500 w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-xl mb-4">3</div>
            <h3 class="text-2xl font-semibold text-white mb-4">üí¨ Bot Interaction</h3>
            <p class="text-purple-200 text-lg">Team members chat with the TaskQuest bot to view their tasks, update progress, and get real-time guidance!</p>
          </div>
          <div class="md:w-1/2">
            <div class="bg-gradient-to-br from-yellow-600 to-orange-800 bg-opacity-50 backdrop-blur-sm p-6 rounded-xl border border-yellow-400 border-opacity-30">
              <div class="text-center">
                <div class="text-4xl mb-4">üí¨</div>
                <p class="text-white">/tasks - View my tasks</p>
                <p class="text-yellow-200 text-sm">/update - Mark task complete</p>
                <div class="mt-2 text-xs text-green-300">‚úì Simple commands, instant updates</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="relative z-10 py-12 px-6 border-t border-white border-opacity-20">
    <div class="max-w-6xl mx-auto">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <a href="/" class="taskquest-logo mb-4 md:mb-0">
          <img src="/taskquest-icon-static.svg" alt="TaskQuest" class="taskquest-icon taskquest-icon-sm" />
          <span class="taskquest-logo-text text-xl">TaskQuest</span>
        </a>
        <div class="text-purple-200 text-sm">
          &copy; 2025 TaskQuest. Turn tasks into adventures.
        </div>
      </div>
    </div>
  </footer>

  <script type="module">
    // Clear any session data on page load (handles server restarts)
    console.log('üîÑ Clearing session data on homepage load');
    sessionStorage.clear();
    localStorage.removeItem('jwt');
    localStorage.removeItem('userId');
    
    // Check if user was previously logged in and show a message
    const wasLoggedIn = document.cookie.includes('token=') || sessionStorage.getItem('jwt');
    if (wasLoggedIn) {
      console.log('üîì Previous session detected, cleared on server restart');
    }
    
    // Modal logic
    const modal = document.getElementById('auth-modal');
    const closeBtn = document.getElementById('close-modal-btn');
    document.querySelectorAll('.open-auth-modal').forEach(btn => {
      btn.onclick = () => { modal.classList.remove('hidden'); };
    });
    closeBtn.onclick = () => { modal.classList.add('hidden'); };
    window.onclick = (e) => { if (e.target === modal) modal.classList.add('hidden'); };

    // Firebase config
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js';
    import { getAuth, signInWithPopup, GoogleAuthProvider, RecaptchaVerifier, signInWithPhoneNumber } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js';
    const firebaseConfig = {
      apiKey: "<%= process.env.FIREBASE_API_KEY %>",
      authDomain: "<%= process.env.FIREBASE_AUTH_DOMAIN %>",
      projectId: "<%= process.env.FIREBASE_PROJECT_ID %>",
      storageBucket: "<%= process.env.FIREBASE_STORAGE_BUCKET %>",
      messagingSenderId: "<%= process.env.FIREBASE_MESSAGING_SENDER_ID %>",
      appId: "<%= process.env.FIREBASE_APP_ID %>"
    };
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);

    // Google Sign-In
    document.getElementById('google-signin-btn').onclick = async () => {
      try {
        const provider = new GoogleAuthProvider();
        const result = await signInWithPopup(auth, provider);
        // Always get a fresh token
        const idToken = await result.user.getIdToken(true);
        // Send idToken to backend
        const response = await fetch('/api/auth/firebase', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ idToken })
        });
        const data = await response.json();
        if (data.token) {
          localStorage.setItem('jwt', data.token);
          document.getElementById('result').innerText = '‚úÖ Google sign-in successful!';
          setTimeout(() => { modal.classList.add('hidden'); window.location.href = '/dashboard'; }, 1000);
        } else {
          document.getElementById('result').innerText = 'Google sign-in failed.';
        }
      } catch (err) {
        document.getElementById('result').innerText = 'Google sign-in failed.';
      }
    };

    // Phone OTP logic
    let confirmationResult;
    let recaptcha;
    function setupRecaptcha() {
      if (!recaptcha) {
        recaptcha = new RecaptchaVerifier('recaptcha-container', { 'size': 'normal' }, auth);
        recaptcha.render();
      }
    }
    setupRecaptcha();

    document.getElementById('phone-form').onsubmit = async function(e) {
      e.preventDefault();
      const phoneNumber = document.getElementById('phone').value;
      try {
        confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, recaptcha);
        document.getElementById('phone-form').classList.add('hidden');
        document.getElementById('otp-form').classList.remove('hidden');
        document.getElementById('result').innerText = 'OTP sent! Please check your phone.';
      } catch (error) {
        document.getElementById('result').innerText = error.message;
      }
    };

    document.getElementById('otp-form').onsubmit = async function(e) {
      e.preventDefault();
      const code = document.getElementById('otp').value;
      try {
        const result = await confirmationResult.confirm(code);
        // Always get a fresh token
        const idToken = await result.user.getIdToken(true);
        // Send idToken to backend
        const response = await fetch('/api/auth/firebase', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ idToken })
        });
        const data = await response.json();
        if (data.token) {
          localStorage.setItem('jwt', data.token);
          document.getElementById('result').innerText = '‚úÖ Phone sign-in successful!';
          setTimeout(() => { modal.classList.add('hidden'); window.location.href = '/dashboard'; }, 1000);
        } else {
          document.getElementById('result').innerText = 'Phone sign-in failed.';
        }
      } catch (error) {
        document.getElementById('result').innerText = '‚ùå Invalid OTP. Try again.';
      }
    };

    // Flash message functions
    function closeFlash(id) {
      const element = document.getElementById(id);
      if (element) {
        element.classList.add('flash-out');
        setTimeout(() => element.remove(), 300);
      }
    }

    // Auto-dismiss flash messages after 3 seconds
    document.addEventListener('DOMContentLoaded', function() {
      const flashMessages = document.querySelectorAll('.flash-notification');
      flashMessages.forEach(function(flash) {
        setTimeout(function() {
          if (flash && flash.parentNode) {
            flash.classList.add('flash-out');
            setTimeout(() => flash.remove(), 300);
          }
        }, 3000);
      });
    });
  </script>
</body>
</html>